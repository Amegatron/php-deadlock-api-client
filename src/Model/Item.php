<?php
/**
 * Item
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock Assets API
 *
 * API for Deadlock assets, including hero stats and images, and item stats and images.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeadlockApi\Model;

use \ArrayAccess;
use \DeadlockApi\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Item implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'class_name' => 'string',
        'image' => 'string',
        'video' => 'string',
        'properties' => 'array<string,\DeadlockApi\Model\ItemPropertiesValue>',
        'weapon_info' => '\DeadlockApi\Model\ItemInfoWeaponInfo',
        'dof_while_zoomed' => '\DeadlockApi\Model\ItemDofWhileZoomed',
        'points_cost' => 'int',
        'unlocks_cost' => 'int',
        'max_level' => 'int',
        'tier' => '\DeadlockApi\Model\Tier',
        'item_slot_type' => '\DeadlockApi\Model\ItemSlotType',
        'child_items' => '\DeadlockApi\Model\ChildItems',
        'id' => 'int',
        'video_mp4_h264' => 'string',
        'type' => '\DeadlockApi\Model\ItemType',
        'cost' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'class_name' => null,
        'image' => null,
        'video' => null,
        'properties' => null,
        'weapon_info' => null,
        'dof_while_zoomed' => null,
        'points_cost' => null,
        'unlocks_cost' => null,
        'max_level' => null,
        'tier' => null,
        'item_slot_type' => null,
        'child_items' => null,
        'id' => null,
        'video_mp4_h264' => null,
        'type' => null,
        'cost' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'class_name' => false,
        'image' => true,
        'video' => true,
        'properties' => true,
        'weapon_info' => true,
        'dof_while_zoomed' => true,
        'points_cost' => true,
        'unlocks_cost' => true,
        'max_level' => true,
        'tier' => true,
        'item_slot_type' => true,
        'child_items' => true,
        'id' => false,
        'video_mp4_h264' => true,
        'type' => true,
        'cost' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'class_name' => 'class_name',
        'image' => 'image',
        'video' => 'video',
        'properties' => 'properties',
        'weapon_info' => 'weapon_info',
        'dof_while_zoomed' => 'dof_while_zoomed',
        'points_cost' => 'points_cost',
        'unlocks_cost' => 'unlocks_cost',
        'max_level' => 'max_level',
        'tier' => 'tier',
        'item_slot_type' => 'item_slot_type',
        'child_items' => 'child_items',
        'id' => 'id',
        'video_mp4_h264' => 'video_mp4_h264',
        'type' => 'type',
        'cost' => 'cost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'class_name' => 'setClassName',
        'image' => 'setImage',
        'video' => 'setVideo',
        'properties' => 'setProperties',
        'weapon_info' => 'setWeaponInfo',
        'dof_while_zoomed' => 'setDofWhileZoomed',
        'points_cost' => 'setPointsCost',
        'unlocks_cost' => 'setUnlocksCost',
        'max_level' => 'setMaxLevel',
        'tier' => 'setTier',
        'item_slot_type' => 'setItemSlotType',
        'child_items' => 'setChildItems',
        'id' => 'setId',
        'video_mp4_h264' => 'setVideoMp4H264',
        'type' => 'setType',
        'cost' => 'setCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'class_name' => 'getClassName',
        'image' => 'getImage',
        'video' => 'getVideo',
        'properties' => 'getProperties',
        'weapon_info' => 'getWeaponInfo',
        'dof_while_zoomed' => 'getDofWhileZoomed',
        'points_cost' => 'getPointsCost',
        'unlocks_cost' => 'getUnlocksCost',
        'max_level' => 'getMaxLevel',
        'tier' => 'getTier',
        'item_slot_type' => 'getItemSlotType',
        'child_items' => 'getChildItems',
        'id' => 'getId',
        'video_mp4_h264' => 'getVideoMp4H264',
        'type' => 'getType',
        'cost' => 'getCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('video', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('weapon_info', $data ?? [], null);
        $this->setIfExists('dof_while_zoomed', $data ?? [], null);
        $this->setIfExists('points_cost', $data ?? [], null);
        $this->setIfExists('unlocks_cost', $data ?? [], null);
        $this->setIfExists('max_level', $data ?? [], null);
        $this->setIfExists('tier', $data ?? [], null);
        $this->setIfExists('item_slot_type', $data ?? [], null);
        $this->setIfExists('child_items', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('video_mp4_h264', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['class_name'] === null) {
            $invalidProperties[] = "'class_name' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['video_mp4_h264'] === null) {
            $invalidProperties[] = "'video_mp4_h264' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            array_push($this->openAPINullablesSetToNull, 'image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets video
     *
     * @return string|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param string|null $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (is_null($video)) {
            array_push($this->openAPINullablesSetToNull, 'video');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return array<string,\DeadlockApi\Model\ItemPropertiesValue>|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param array<string,\DeadlockApi\Model\ItemPropertiesValue>|null $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            array_push($this->openAPINullablesSetToNull, 'properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets weapon_info
     *
     * @return \DeadlockApi\Model\ItemInfoWeaponInfo|null
     */
    public function getWeaponInfo()
    {
        return $this->container['weapon_info'];
    }

    /**
     * Sets weapon_info
     *
     * @param \DeadlockApi\Model\ItemInfoWeaponInfo|null $weapon_info weapon_info
     *
     * @return self
     */
    public function setWeaponInfo($weapon_info)
    {
        if (is_null($weapon_info)) {
            array_push($this->openAPINullablesSetToNull, 'weapon_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weapon_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weapon_info'] = $weapon_info;

        return $this;
    }

    /**
     * Gets dof_while_zoomed
     *
     * @return \DeadlockApi\Model\ItemDofWhileZoomed|null
     */
    public function getDofWhileZoomed()
    {
        return $this->container['dof_while_zoomed'];
    }

    /**
     * Sets dof_while_zoomed
     *
     * @param \DeadlockApi\Model\ItemDofWhileZoomed|null $dof_while_zoomed dof_while_zoomed
     *
     * @return self
     */
    public function setDofWhileZoomed($dof_while_zoomed)
    {
        if (is_null($dof_while_zoomed)) {
            array_push($this->openAPINullablesSetToNull, 'dof_while_zoomed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dof_while_zoomed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dof_while_zoomed'] = $dof_while_zoomed;

        return $this;
    }

    /**
     * Gets points_cost
     *
     * @return int|null
     */
    public function getPointsCost()
    {
        return $this->container['points_cost'];
    }

    /**
     * Sets points_cost
     *
     * @param int|null $points_cost points_cost
     *
     * @return self
     */
    public function setPointsCost($points_cost)
    {
        if (is_null($points_cost)) {
            array_push($this->openAPINullablesSetToNull, 'points_cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('points_cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['points_cost'] = $points_cost;

        return $this;
    }

    /**
     * Gets unlocks_cost
     *
     * @return int|null
     */
    public function getUnlocksCost()
    {
        return $this->container['unlocks_cost'];
    }

    /**
     * Sets unlocks_cost
     *
     * @param int|null $unlocks_cost unlocks_cost
     *
     * @return self
     */
    public function setUnlocksCost($unlocks_cost)
    {
        if (is_null($unlocks_cost)) {
            array_push($this->openAPINullablesSetToNull, 'unlocks_cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unlocks_cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unlocks_cost'] = $unlocks_cost;

        return $this;
    }

    /**
     * Gets max_level
     *
     * @return int|null
     */
    public function getMaxLevel()
    {
        return $this->container['max_level'];
    }

    /**
     * Sets max_level
     *
     * @param int|null $max_level max_level
     *
     * @return self
     */
    public function setMaxLevel($max_level)
    {
        if (is_null($max_level)) {
            array_push($this->openAPINullablesSetToNull, 'max_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_level'] = $max_level;

        return $this;
    }

    /**
     * Gets tier
     *
     * @return \DeadlockApi\Model\Tier|null
     */
    public function getTier()
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param \DeadlockApi\Model\Tier|null $tier tier
     *
     * @return self
     */
    public function setTier($tier)
    {
        if (is_null($tier)) {
            array_push($this->openAPINullablesSetToNull, 'tier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tier'] = $tier;

        return $this;
    }

    /**
     * Gets item_slot_type
     *
     * @return \DeadlockApi\Model\ItemSlotType|null
     */
    public function getItemSlotType()
    {
        return $this->container['item_slot_type'];
    }

    /**
     * Sets item_slot_type
     *
     * @param \DeadlockApi\Model\ItemSlotType|null $item_slot_type item_slot_type
     *
     * @return self
     */
    public function setItemSlotType($item_slot_type)
    {
        if (is_null($item_slot_type)) {
            array_push($this->openAPINullablesSetToNull, 'item_slot_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_slot_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_slot_type'] = $item_slot_type;

        return $this;
    }

    /**
     * Gets child_items
     *
     * @return \DeadlockApi\Model\ChildItems|null
     */
    public function getChildItems()
    {
        return $this->container['child_items'];
    }

    /**
     * Sets child_items
     *
     * @param \DeadlockApi\Model\ChildItems|null $child_items child_items
     *
     * @return self
     */
    public function setChildItems($child_items)
    {
        if (is_null($child_items)) {
            array_push($this->openAPINullablesSetToNull, 'child_items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('child_items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['child_items'] = $child_items;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets video_mp4_h264
     *
     * @return string
     */
    public function getVideoMp4H264()
    {
        return $this->container['video_mp4_h264'];
    }

    /**
     * Sets video_mp4_h264
     *
     * @param string $video_mp4_h264 video_mp4_h264
     *
     * @return self
     */
    public function setVideoMp4H264($video_mp4_h264)
    {
        if (is_null($video_mp4_h264)) {
            array_push($this->openAPINullablesSetToNull, 'video_mp4_h264');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_mp4_h264', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['video_mp4_h264'] = $video_mp4_h264;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \DeadlockApi\Model\ItemType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \DeadlockApi\Model\ItemType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return int
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            array_push($this->openAPINullablesSetToNull, 'cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost'] = $cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


