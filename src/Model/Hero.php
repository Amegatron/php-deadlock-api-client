<?php
/**
 * Hero
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock Assets API
 *
 * API for Deadlock assets, including hero stats and images, and item stats and images.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeadlockApi\Model;

use \ArrayAccess;
use \DeadlockApi\ObjectSerializer;

/**
 * Hero Class Doc Comment
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Hero implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Hero';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'class_name' => 'string',
        'name' => 'string',
        'player_selectable' => 'bool',
        'disabled' => 'bool',
        'in_development' => 'bool',
        'needs_testing' => 'bool',
        'assigned_players_only' => 'bool',
        'bot_selectable' => 'bool',
        'limited_testing' => 'bool',
        'complexity' => 'int',
        'readability' => 'int',
        'starting_stats' => '\DeadlockApi\Model\HeroStartingStats',
        'collision_radius' => 'float',
        'collision_height' => 'float',
        'step_height' => 'float',
        'items' => 'array<string,\DeadlockApi\Model\ItemsValue>',
        'item_slot_info' => '\DeadlockApi\Model\HeroItemSlotInfo',
        'purchase_bonuses' => '\DeadlockApi\Model\HeroPurchaseBonuses',
        'level_info' => 'array<string,\DeadlockApi\Model\HeroLevelInfo>',
        'stealth_speed_meters_per_second' => 'float',
        'footstep_sound_travel_distance_meters' => 'float',
        'step_sound_time' => 'float',
        'color_ui' => 'string[]',
        'color_glow_friendly' => 'string[]',
        'color_glow_enemy' => 'string[]',
        'color_glow_team1' => 'string[]',
        'color_glow_team2' => 'string[]',
        'standard_level_up_upgrades' => 'array<string,float>',
        'hero_shop_stat_display' => '\DeadlockApi\Model\HeroShopStatDisplay',
        'selection_image' => 'string',
        'icon_image_small' => 'string',
        'minimap_image' => 'string',
        'icon_hero_card' => 'string',
        'top_bar_image' => 'string',
        'images' => '\DeadlockApi\Model\HeroImages'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'class_name' => null,
        'name' => null,
        'player_selectable' => null,
        'disabled' => null,
        'in_development' => null,
        'needs_testing' => null,
        'assigned_players_only' => null,
        'bot_selectable' => null,
        'limited_testing' => null,
        'complexity' => null,
        'readability' => null,
        'starting_stats' => null,
        'collision_radius' => null,
        'collision_height' => null,
        'step_height' => null,
        'items' => null,
        'item_slot_info' => null,
        'purchase_bonuses' => null,
        'level_info' => null,
        'stealth_speed_meters_per_second' => null,
        'footstep_sound_travel_distance_meters' => null,
        'step_sound_time' => null,
        'color_ui' => null,
        'color_glow_friendly' => null,
        'color_glow_enemy' => null,
        'color_glow_team1' => null,
        'color_glow_team2' => null,
        'standard_level_up_upgrades' => null,
        'hero_shop_stat_display' => null,
        'selection_image' => null,
        'icon_image_small' => null,
        'minimap_image' => null,
        'icon_hero_card' => null,
        'top_bar_image' => null,
        'images' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'class_name' => false,
        'name' => true,
        'player_selectable' => false,
        'disabled' => false,
        'in_development' => false,
        'needs_testing' => false,
        'assigned_players_only' => false,
        'bot_selectable' => false,
        'limited_testing' => false,
        'complexity' => false,
        'readability' => false,
        'starting_stats' => false,
        'collision_radius' => false,
        'collision_height' => false,
        'step_height' => false,
        'items' => false,
        'item_slot_info' => false,
        'purchase_bonuses' => false,
        'level_info' => false,
        'stealth_speed_meters_per_second' => false,
        'footstep_sound_travel_distance_meters' => false,
        'step_sound_time' => false,
        'color_ui' => false,
        'color_glow_friendly' => false,
        'color_glow_enemy' => false,
        'color_glow_team1' => false,
        'color_glow_team2' => false,
        'standard_level_up_upgrades' => false,
        'hero_shop_stat_display' => true,
        'selection_image' => true,
        'icon_image_small' => true,
        'minimap_image' => true,
        'icon_hero_card' => true,
        'top_bar_image' => true,
        'images' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'class_name' => 'class_name',
        'name' => 'name',
        'player_selectable' => 'player_selectable',
        'disabled' => 'disabled',
        'in_development' => 'in_development',
        'needs_testing' => 'needs_testing',
        'assigned_players_only' => 'assigned_players_only',
        'bot_selectable' => 'bot_selectable',
        'limited_testing' => 'limited_testing',
        'complexity' => 'complexity',
        'readability' => 'readability',
        'starting_stats' => 'starting_stats',
        'collision_radius' => 'collision_radius',
        'collision_height' => 'collision_height',
        'step_height' => 'step_height',
        'items' => 'items',
        'item_slot_info' => 'item_slot_info',
        'purchase_bonuses' => 'purchase_bonuses',
        'level_info' => 'level_info',
        'stealth_speed_meters_per_second' => 'stealth_speed_meters_per_second',
        'footstep_sound_travel_distance_meters' => 'footstep_sound_travel_distance_meters',
        'step_sound_time' => 'step_sound_time',
        'color_ui' => 'color_ui',
        'color_glow_friendly' => 'color_glow_friendly',
        'color_glow_enemy' => 'color_glow_enemy',
        'color_glow_team1' => 'color_glow_team1',
        'color_glow_team2' => 'color_glow_team2',
        'standard_level_up_upgrades' => 'standard_level_up_upgrades',
        'hero_shop_stat_display' => 'hero_shop_stat_display',
        'selection_image' => 'selection_image',
        'icon_image_small' => 'icon_image_small',
        'minimap_image' => 'minimap_image',
        'icon_hero_card' => 'icon_hero_card',
        'top_bar_image' => 'top_bar_image',
        'images' => 'images'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'class_name' => 'setClassName',
        'name' => 'setName',
        'player_selectable' => 'setPlayerSelectable',
        'disabled' => 'setDisabled',
        'in_development' => 'setInDevelopment',
        'needs_testing' => 'setNeedsTesting',
        'assigned_players_only' => 'setAssignedPlayersOnly',
        'bot_selectable' => 'setBotSelectable',
        'limited_testing' => 'setLimitedTesting',
        'complexity' => 'setComplexity',
        'readability' => 'setReadability',
        'starting_stats' => 'setStartingStats',
        'collision_radius' => 'setCollisionRadius',
        'collision_height' => 'setCollisionHeight',
        'step_height' => 'setStepHeight',
        'items' => 'setItems',
        'item_slot_info' => 'setItemSlotInfo',
        'purchase_bonuses' => 'setPurchaseBonuses',
        'level_info' => 'setLevelInfo',
        'stealth_speed_meters_per_second' => 'setStealthSpeedMetersPerSecond',
        'footstep_sound_travel_distance_meters' => 'setFootstepSoundTravelDistanceMeters',
        'step_sound_time' => 'setStepSoundTime',
        'color_ui' => 'setColorUi',
        'color_glow_friendly' => 'setColorGlowFriendly',
        'color_glow_enemy' => 'setColorGlowEnemy',
        'color_glow_team1' => 'setColorGlowTeam1',
        'color_glow_team2' => 'setColorGlowTeam2',
        'standard_level_up_upgrades' => 'setStandardLevelUpUpgrades',
        'hero_shop_stat_display' => 'setHeroShopStatDisplay',
        'selection_image' => 'setSelectionImage',
        'icon_image_small' => 'setIconImageSmall',
        'minimap_image' => 'setMinimapImage',
        'icon_hero_card' => 'setIconHeroCard',
        'top_bar_image' => 'setTopBarImage',
        'images' => 'setImages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'class_name' => 'getClassName',
        'name' => 'getName',
        'player_selectable' => 'getPlayerSelectable',
        'disabled' => 'getDisabled',
        'in_development' => 'getInDevelopment',
        'needs_testing' => 'getNeedsTesting',
        'assigned_players_only' => 'getAssignedPlayersOnly',
        'bot_selectable' => 'getBotSelectable',
        'limited_testing' => 'getLimitedTesting',
        'complexity' => 'getComplexity',
        'readability' => 'getReadability',
        'starting_stats' => 'getStartingStats',
        'collision_radius' => 'getCollisionRadius',
        'collision_height' => 'getCollisionHeight',
        'step_height' => 'getStepHeight',
        'items' => 'getItems',
        'item_slot_info' => 'getItemSlotInfo',
        'purchase_bonuses' => 'getPurchaseBonuses',
        'level_info' => 'getLevelInfo',
        'stealth_speed_meters_per_second' => 'getStealthSpeedMetersPerSecond',
        'footstep_sound_travel_distance_meters' => 'getFootstepSoundTravelDistanceMeters',
        'step_sound_time' => 'getStepSoundTime',
        'color_ui' => 'getColorUi',
        'color_glow_friendly' => 'getColorGlowFriendly',
        'color_glow_enemy' => 'getColorGlowEnemy',
        'color_glow_team1' => 'getColorGlowTeam1',
        'color_glow_team2' => 'getColorGlowTeam2',
        'standard_level_up_upgrades' => 'getStandardLevelUpUpgrades',
        'hero_shop_stat_display' => 'getHeroShopStatDisplay',
        'selection_image' => 'getSelectionImage',
        'icon_image_small' => 'getIconImageSmall',
        'minimap_image' => 'getMinimapImage',
        'icon_hero_card' => 'getIconHeroCard',
        'top_bar_image' => 'getTopBarImage',
        'images' => 'getImages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('player_selectable', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('in_development', $data ?? [], null);
        $this->setIfExists('needs_testing', $data ?? [], null);
        $this->setIfExists('assigned_players_only', $data ?? [], null);
        $this->setIfExists('bot_selectable', $data ?? [], null);
        $this->setIfExists('limited_testing', $data ?? [], null);
        $this->setIfExists('complexity', $data ?? [], null);
        $this->setIfExists('readability', $data ?? [], null);
        $this->setIfExists('starting_stats', $data ?? [], null);
        $this->setIfExists('collision_radius', $data ?? [], null);
        $this->setIfExists('collision_height', $data ?? [], null);
        $this->setIfExists('step_height', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('item_slot_info', $data ?? [], null);
        $this->setIfExists('purchase_bonuses', $data ?? [], null);
        $this->setIfExists('level_info', $data ?? [], null);
        $this->setIfExists('stealth_speed_meters_per_second', $data ?? [], null);
        $this->setIfExists('footstep_sound_travel_distance_meters', $data ?? [], null);
        $this->setIfExists('step_sound_time', $data ?? [], null);
        $this->setIfExists('color_ui', $data ?? [], null);
        $this->setIfExists('color_glow_friendly', $data ?? [], null);
        $this->setIfExists('color_glow_enemy', $data ?? [], null);
        $this->setIfExists('color_glow_team1', $data ?? [], null);
        $this->setIfExists('color_glow_team2', $data ?? [], null);
        $this->setIfExists('standard_level_up_upgrades', $data ?? [], null);
        $this->setIfExists('hero_shop_stat_display', $data ?? [], null);
        $this->setIfExists('selection_image', $data ?? [], null);
        $this->setIfExists('icon_image_small', $data ?? [], null);
        $this->setIfExists('minimap_image', $data ?? [], null);
        $this->setIfExists('icon_hero_card', $data ?? [], null);
        $this->setIfExists('top_bar_image', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['class_name'] === null) {
            $invalidProperties[] = "'class_name' can't be null";
        }
        if ($this->container['player_selectable'] === null) {
            $invalidProperties[] = "'player_selectable' can't be null";
        }
        if ($this->container['disabled'] === null) {
            $invalidProperties[] = "'disabled' can't be null";
        }
        if ($this->container['in_development'] === null) {
            $invalidProperties[] = "'in_development' can't be null";
        }
        if ($this->container['needs_testing'] === null) {
            $invalidProperties[] = "'needs_testing' can't be null";
        }
        if ($this->container['assigned_players_only'] === null) {
            $invalidProperties[] = "'assigned_players_only' can't be null";
        }
        if ($this->container['bot_selectable'] === null) {
            $invalidProperties[] = "'bot_selectable' can't be null";
        }
        if ($this->container['limited_testing'] === null) {
            $invalidProperties[] = "'limited_testing' can't be null";
        }
        if ($this->container['complexity'] === null) {
            $invalidProperties[] = "'complexity' can't be null";
        }
        if ($this->container['readability'] === null) {
            $invalidProperties[] = "'readability' can't be null";
        }
        if ($this->container['starting_stats'] === null) {
            $invalidProperties[] = "'starting_stats' can't be null";
        }
        if ($this->container['collision_radius'] === null) {
            $invalidProperties[] = "'collision_radius' can't be null";
        }
        if ($this->container['collision_height'] === null) {
            $invalidProperties[] = "'collision_height' can't be null";
        }
        if ($this->container['step_height'] === null) {
            $invalidProperties[] = "'step_height' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['item_slot_info'] === null) {
            $invalidProperties[] = "'item_slot_info' can't be null";
        }
        if ($this->container['purchase_bonuses'] === null) {
            $invalidProperties[] = "'purchase_bonuses' can't be null";
        }
        if ($this->container['level_info'] === null) {
            $invalidProperties[] = "'level_info' can't be null";
        }
        if ($this->container['stealth_speed_meters_per_second'] === null) {
            $invalidProperties[] = "'stealth_speed_meters_per_second' can't be null";
        }
        if ($this->container['footstep_sound_travel_distance_meters'] === null) {
            $invalidProperties[] = "'footstep_sound_travel_distance_meters' can't be null";
        }
        if ($this->container['step_sound_time'] === null) {
            $invalidProperties[] = "'step_sound_time' can't be null";
        }
        if ($this->container['color_ui'] === null) {
            $invalidProperties[] = "'color_ui' can't be null";
        }
        if ((count($this->container['color_ui']) > 3)) {
            $invalidProperties[] = "invalid value for 'color_ui', number of items must be less than or equal to 3.";
        }

        if ((count($this->container['color_ui']) < 3)) {
            $invalidProperties[] = "invalid value for 'color_ui', number of items must be greater than or equal to 3.";
        }

        if ($this->container['color_glow_friendly'] === null) {
            $invalidProperties[] = "'color_glow_friendly' can't be null";
        }
        if ((count($this->container['color_glow_friendly']) > 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_friendly', number of items must be less than or equal to 3.";
        }

        if ((count($this->container['color_glow_friendly']) < 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_friendly', number of items must be greater than or equal to 3.";
        }

        if ($this->container['color_glow_enemy'] === null) {
            $invalidProperties[] = "'color_glow_enemy' can't be null";
        }
        if ((count($this->container['color_glow_enemy']) > 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_enemy', number of items must be less than or equal to 3.";
        }

        if ((count($this->container['color_glow_enemy']) < 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_enemy', number of items must be greater than or equal to 3.";
        }

        if ($this->container['color_glow_team1'] === null) {
            $invalidProperties[] = "'color_glow_team1' can't be null";
        }
        if ((count($this->container['color_glow_team1']) > 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_team1', number of items must be less than or equal to 3.";
        }

        if ((count($this->container['color_glow_team1']) < 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_team1', number of items must be greater than or equal to 3.";
        }

        if ($this->container['color_glow_team2'] === null) {
            $invalidProperties[] = "'color_glow_team2' can't be null";
        }
        if ((count($this->container['color_glow_team2']) > 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_team2', number of items must be less than or equal to 3.";
        }

        if ((count($this->container['color_glow_team2']) < 3)) {
            $invalidProperties[] = "invalid value for 'color_glow_team2', number of items must be greater than or equal to 3.";
        }

        if ($this->container['standard_level_up_upgrades'] === null) {
            $invalidProperties[] = "'standard_level_up_upgrades' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets player_selectable
     *
     * @return bool
     */
    public function getPlayerSelectable()
    {
        return $this->container['player_selectable'];
    }

    /**
     * Sets player_selectable
     *
     * @param bool $player_selectable player_selectable
     *
     * @return self
     */
    public function setPlayerSelectable($player_selectable)
    {
        if (is_null($player_selectable)) {
            throw new \InvalidArgumentException('non-nullable player_selectable cannot be null');
        }
        $this->container['player_selectable'] = $player_selectable;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        if (is_null($disabled)) {
            throw new \InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets in_development
     *
     * @return bool
     */
    public function getInDevelopment()
    {
        return $this->container['in_development'];
    }

    /**
     * Sets in_development
     *
     * @param bool $in_development in_development
     *
     * @return self
     */
    public function setInDevelopment($in_development)
    {
        if (is_null($in_development)) {
            throw new \InvalidArgumentException('non-nullable in_development cannot be null');
        }
        $this->container['in_development'] = $in_development;

        return $this;
    }

    /**
     * Gets needs_testing
     *
     * @return bool
     */
    public function getNeedsTesting()
    {
        return $this->container['needs_testing'];
    }

    /**
     * Sets needs_testing
     *
     * @param bool $needs_testing needs_testing
     *
     * @return self
     */
    public function setNeedsTesting($needs_testing)
    {
        if (is_null($needs_testing)) {
            throw new \InvalidArgumentException('non-nullable needs_testing cannot be null');
        }
        $this->container['needs_testing'] = $needs_testing;

        return $this;
    }

    /**
     * Gets assigned_players_only
     *
     * @return bool
     */
    public function getAssignedPlayersOnly()
    {
        return $this->container['assigned_players_only'];
    }

    /**
     * Sets assigned_players_only
     *
     * @param bool $assigned_players_only assigned_players_only
     *
     * @return self
     */
    public function setAssignedPlayersOnly($assigned_players_only)
    {
        if (is_null($assigned_players_only)) {
            throw new \InvalidArgumentException('non-nullable assigned_players_only cannot be null');
        }
        $this->container['assigned_players_only'] = $assigned_players_only;

        return $this;
    }

    /**
     * Gets bot_selectable
     *
     * @return bool
     */
    public function getBotSelectable()
    {
        return $this->container['bot_selectable'];
    }

    /**
     * Sets bot_selectable
     *
     * @param bool $bot_selectable bot_selectable
     *
     * @return self
     */
    public function setBotSelectable($bot_selectable)
    {
        if (is_null($bot_selectable)) {
            throw new \InvalidArgumentException('non-nullable bot_selectable cannot be null');
        }
        $this->container['bot_selectable'] = $bot_selectable;

        return $this;
    }

    /**
     * Gets limited_testing
     *
     * @return bool
     */
    public function getLimitedTesting()
    {
        return $this->container['limited_testing'];
    }

    /**
     * Sets limited_testing
     *
     * @param bool $limited_testing limited_testing
     *
     * @return self
     */
    public function setLimitedTesting($limited_testing)
    {
        if (is_null($limited_testing)) {
            throw new \InvalidArgumentException('non-nullable limited_testing cannot be null');
        }
        $this->container['limited_testing'] = $limited_testing;

        return $this;
    }

    /**
     * Gets complexity
     *
     * @return int
     */
    public function getComplexity()
    {
        return $this->container['complexity'];
    }

    /**
     * Sets complexity
     *
     * @param int $complexity complexity
     *
     * @return self
     */
    public function setComplexity($complexity)
    {
        if (is_null($complexity)) {
            throw new \InvalidArgumentException('non-nullable complexity cannot be null');
        }
        $this->container['complexity'] = $complexity;

        return $this;
    }

    /**
     * Gets readability
     *
     * @return int
     */
    public function getReadability()
    {
        return $this->container['readability'];
    }

    /**
     * Sets readability
     *
     * @param int $readability readability
     *
     * @return self
     */
    public function setReadability($readability)
    {
        if (is_null($readability)) {
            throw new \InvalidArgumentException('non-nullable readability cannot be null');
        }
        $this->container['readability'] = $readability;

        return $this;
    }

    /**
     * Gets starting_stats
     *
     * @return \DeadlockApi\Model\HeroStartingStats
     */
    public function getStartingStats()
    {
        return $this->container['starting_stats'];
    }

    /**
     * Sets starting_stats
     *
     * @param \DeadlockApi\Model\HeroStartingStats $starting_stats starting_stats
     *
     * @return self
     */
    public function setStartingStats($starting_stats)
    {
        if (is_null($starting_stats)) {
            throw new \InvalidArgumentException('non-nullable starting_stats cannot be null');
        }
        $this->container['starting_stats'] = $starting_stats;

        return $this;
    }

    /**
     * Gets collision_radius
     *
     * @return float
     */
    public function getCollisionRadius()
    {
        return $this->container['collision_radius'];
    }

    /**
     * Sets collision_radius
     *
     * @param float $collision_radius collision_radius
     *
     * @return self
     */
    public function setCollisionRadius($collision_radius)
    {
        if (is_null($collision_radius)) {
            throw new \InvalidArgumentException('non-nullable collision_radius cannot be null');
        }
        $this->container['collision_radius'] = $collision_radius;

        return $this;
    }

    /**
     * Gets collision_height
     *
     * @return float
     */
    public function getCollisionHeight()
    {
        return $this->container['collision_height'];
    }

    /**
     * Sets collision_height
     *
     * @param float $collision_height collision_height
     *
     * @return self
     */
    public function setCollisionHeight($collision_height)
    {
        if (is_null($collision_height)) {
            throw new \InvalidArgumentException('non-nullable collision_height cannot be null');
        }
        $this->container['collision_height'] = $collision_height;

        return $this;
    }

    /**
     * Gets step_height
     *
     * @return float
     */
    public function getStepHeight()
    {
        return $this->container['step_height'];
    }

    /**
     * Sets step_height
     *
     * @param float $step_height step_height
     *
     * @return self
     */
    public function setStepHeight($step_height)
    {
        if (is_null($step_height)) {
            throw new \InvalidArgumentException('non-nullable step_height cannot be null');
        }
        $this->container['step_height'] = $step_height;

        return $this;
    }

    /**
     * Gets items
     *
     * @return array<string,\DeadlockApi\Model\ItemsValue>
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param array<string,\DeadlockApi\Model\ItemsValue> $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets item_slot_info
     *
     * @return \DeadlockApi\Model\HeroItemSlotInfo
     */
    public function getItemSlotInfo()
    {
        return $this->container['item_slot_info'];
    }

    /**
     * Sets item_slot_info
     *
     * @param \DeadlockApi\Model\HeroItemSlotInfo $item_slot_info item_slot_info
     *
     * @return self
     */
    public function setItemSlotInfo($item_slot_info)
    {
        if (is_null($item_slot_info)) {
            throw new \InvalidArgumentException('non-nullable item_slot_info cannot be null');
        }
        $this->container['item_slot_info'] = $item_slot_info;

        return $this;
    }

    /**
     * Gets purchase_bonuses
     *
     * @return \DeadlockApi\Model\HeroPurchaseBonuses
     */
    public function getPurchaseBonuses()
    {
        return $this->container['purchase_bonuses'];
    }

    /**
     * Sets purchase_bonuses
     *
     * @param \DeadlockApi\Model\HeroPurchaseBonuses $purchase_bonuses purchase_bonuses
     *
     * @return self
     */
    public function setPurchaseBonuses($purchase_bonuses)
    {
        if (is_null($purchase_bonuses)) {
            throw new \InvalidArgumentException('non-nullable purchase_bonuses cannot be null');
        }
        $this->container['purchase_bonuses'] = $purchase_bonuses;

        return $this;
    }

    /**
     * Gets level_info
     *
     * @return array<string,\DeadlockApi\Model\HeroLevelInfo>
     */
    public function getLevelInfo()
    {
        return $this->container['level_info'];
    }

    /**
     * Sets level_info
     *
     * @param array<string,\DeadlockApi\Model\HeroLevelInfo> $level_info level_info
     *
     * @return self
     */
    public function setLevelInfo($level_info)
    {
        if (is_null($level_info)) {
            throw new \InvalidArgumentException('non-nullable level_info cannot be null');
        }
        $this->container['level_info'] = $level_info;

        return $this;
    }

    /**
     * Gets stealth_speed_meters_per_second
     *
     * @return float
     */
    public function getStealthSpeedMetersPerSecond()
    {
        return $this->container['stealth_speed_meters_per_second'];
    }

    /**
     * Sets stealth_speed_meters_per_second
     *
     * @param float $stealth_speed_meters_per_second stealth_speed_meters_per_second
     *
     * @return self
     */
    public function setStealthSpeedMetersPerSecond($stealth_speed_meters_per_second)
    {
        if (is_null($stealth_speed_meters_per_second)) {
            throw new \InvalidArgumentException('non-nullable stealth_speed_meters_per_second cannot be null');
        }
        $this->container['stealth_speed_meters_per_second'] = $stealth_speed_meters_per_second;

        return $this;
    }

    /**
     * Gets footstep_sound_travel_distance_meters
     *
     * @return float
     */
    public function getFootstepSoundTravelDistanceMeters()
    {
        return $this->container['footstep_sound_travel_distance_meters'];
    }

    /**
     * Sets footstep_sound_travel_distance_meters
     *
     * @param float $footstep_sound_travel_distance_meters footstep_sound_travel_distance_meters
     *
     * @return self
     */
    public function setFootstepSoundTravelDistanceMeters($footstep_sound_travel_distance_meters)
    {
        if (is_null($footstep_sound_travel_distance_meters)) {
            throw new \InvalidArgumentException('non-nullable footstep_sound_travel_distance_meters cannot be null');
        }
        $this->container['footstep_sound_travel_distance_meters'] = $footstep_sound_travel_distance_meters;

        return $this;
    }

    /**
     * Gets step_sound_time
     *
     * @return float
     */
    public function getStepSoundTime()
    {
        return $this->container['step_sound_time'];
    }

    /**
     * Sets step_sound_time
     *
     * @param float $step_sound_time step_sound_time
     *
     * @return self
     */
    public function setStepSoundTime($step_sound_time)
    {
        if (is_null($step_sound_time)) {
            throw new \InvalidArgumentException('non-nullable step_sound_time cannot be null');
        }
        $this->container['step_sound_time'] = $step_sound_time;

        return $this;
    }

    /**
     * Gets color_ui
     *
     * @return string[]
     */
    public function getColorUi()
    {
        return $this->container['color_ui'];
    }

    /**
     * Sets color_ui
     *
     * @param string[] $color_ui color_ui
     *
     * @return self
     */
    public function setColorUi($color_ui)
    {
        if (is_null($color_ui)) {
            throw new \InvalidArgumentException('non-nullable color_ui cannot be null');
        }

        if ((count($color_ui) > 3)) {
            throw new \InvalidArgumentException('invalid value for $color_ui when calling Hero., number of items must be less than or equal to 3.');
        }
        if ((count($color_ui) < 3)) {
            throw new \InvalidArgumentException('invalid length for $color_ui when calling Hero., number of items must be greater than or equal to 3.');
        }
        $this->container['color_ui'] = $color_ui;

        return $this;
    }

    /**
     * Gets color_glow_friendly
     *
     * @return string[]
     */
    public function getColorGlowFriendly()
    {
        return $this->container['color_glow_friendly'];
    }

    /**
     * Sets color_glow_friendly
     *
     * @param string[] $color_glow_friendly color_glow_friendly
     *
     * @return self
     */
    public function setColorGlowFriendly($color_glow_friendly)
    {
        if (is_null($color_glow_friendly)) {
            throw new \InvalidArgumentException('non-nullable color_glow_friendly cannot be null');
        }

        if ((count($color_glow_friendly) > 3)) {
            throw new \InvalidArgumentException('invalid value for $color_glow_friendly when calling Hero., number of items must be less than or equal to 3.');
        }
        if ((count($color_glow_friendly) < 3)) {
            throw new \InvalidArgumentException('invalid length for $color_glow_friendly when calling Hero., number of items must be greater than or equal to 3.');
        }
        $this->container['color_glow_friendly'] = $color_glow_friendly;

        return $this;
    }

    /**
     * Gets color_glow_enemy
     *
     * @return string[]
     */
    public function getColorGlowEnemy()
    {
        return $this->container['color_glow_enemy'];
    }

    /**
     * Sets color_glow_enemy
     *
     * @param string[] $color_glow_enemy color_glow_enemy
     *
     * @return self
     */
    public function setColorGlowEnemy($color_glow_enemy)
    {
        if (is_null($color_glow_enemy)) {
            throw new \InvalidArgumentException('non-nullable color_glow_enemy cannot be null');
        }

        if ((count($color_glow_enemy) > 3)) {
            throw new \InvalidArgumentException('invalid value for $color_glow_enemy when calling Hero., number of items must be less than or equal to 3.');
        }
        if ((count($color_glow_enemy) < 3)) {
            throw new \InvalidArgumentException('invalid length for $color_glow_enemy when calling Hero., number of items must be greater than or equal to 3.');
        }
        $this->container['color_glow_enemy'] = $color_glow_enemy;

        return $this;
    }

    /**
     * Gets color_glow_team1
     *
     * @return string[]
     */
    public function getColorGlowTeam1()
    {
        return $this->container['color_glow_team1'];
    }

    /**
     * Sets color_glow_team1
     *
     * @param string[] $color_glow_team1 color_glow_team1
     *
     * @return self
     */
    public function setColorGlowTeam1($color_glow_team1)
    {
        if (is_null($color_glow_team1)) {
            throw new \InvalidArgumentException('non-nullable color_glow_team1 cannot be null');
        }

        if ((count($color_glow_team1) > 3)) {
            throw new \InvalidArgumentException('invalid value for $color_glow_team1 when calling Hero., number of items must be less than or equal to 3.');
        }
        if ((count($color_glow_team1) < 3)) {
            throw new \InvalidArgumentException('invalid length for $color_glow_team1 when calling Hero., number of items must be greater than or equal to 3.');
        }
        $this->container['color_glow_team1'] = $color_glow_team1;

        return $this;
    }

    /**
     * Gets color_glow_team2
     *
     * @return string[]
     */
    public function getColorGlowTeam2()
    {
        return $this->container['color_glow_team2'];
    }

    /**
     * Sets color_glow_team2
     *
     * @param string[] $color_glow_team2 color_glow_team2
     *
     * @return self
     */
    public function setColorGlowTeam2($color_glow_team2)
    {
        if (is_null($color_glow_team2)) {
            throw new \InvalidArgumentException('non-nullable color_glow_team2 cannot be null');
        }

        if ((count($color_glow_team2) > 3)) {
            throw new \InvalidArgumentException('invalid value for $color_glow_team2 when calling Hero., number of items must be less than or equal to 3.');
        }
        if ((count($color_glow_team2) < 3)) {
            throw new \InvalidArgumentException('invalid length for $color_glow_team2 when calling Hero., number of items must be greater than or equal to 3.');
        }
        $this->container['color_glow_team2'] = $color_glow_team2;

        return $this;
    }

    /**
     * Gets standard_level_up_upgrades
     *
     * @return array<string,float>
     */
    public function getStandardLevelUpUpgrades()
    {
        return $this->container['standard_level_up_upgrades'];
    }

    /**
     * Sets standard_level_up_upgrades
     *
     * @param array<string,float> $standard_level_up_upgrades standard_level_up_upgrades
     *
     * @return self
     */
    public function setStandardLevelUpUpgrades($standard_level_up_upgrades)
    {
        if (is_null($standard_level_up_upgrades)) {
            throw new \InvalidArgumentException('non-nullable standard_level_up_upgrades cannot be null');
        }
        $this->container['standard_level_up_upgrades'] = $standard_level_up_upgrades;

        return $this;
    }

    /**
     * Gets hero_shop_stat_display
     *
     * @return \DeadlockApi\Model\HeroShopStatDisplay|null
     */
    public function getHeroShopStatDisplay()
    {
        return $this->container['hero_shop_stat_display'];
    }

    /**
     * Sets hero_shop_stat_display
     *
     * @param \DeadlockApi\Model\HeroShopStatDisplay|null $hero_shop_stat_display hero_shop_stat_display
     *
     * @return self
     */
    public function setHeroShopStatDisplay($hero_shop_stat_display)
    {
        if (is_null($hero_shop_stat_display)) {
            array_push($this->openAPINullablesSetToNull, 'hero_shop_stat_display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hero_shop_stat_display', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hero_shop_stat_display'] = $hero_shop_stat_display;

        return $this;
    }

    /**
     * Gets selection_image
     *
     * @return string|null
     */
    public function getSelectionImage()
    {
        return $this->container['selection_image'];
    }

    /**
     * Sets selection_image
     *
     * @param string|null $selection_image selection_image
     *
     * @return self
     */
    public function setSelectionImage($selection_image)
    {
        if (is_null($selection_image)) {
            array_push($this->openAPINullablesSetToNull, 'selection_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('selection_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['selection_image'] = $selection_image;

        return $this;
    }

    /**
     * Gets icon_image_small
     *
     * @return string|null
     */
    public function getIconImageSmall()
    {
        return $this->container['icon_image_small'];
    }

    /**
     * Sets icon_image_small
     *
     * @param string|null $icon_image_small icon_image_small
     *
     * @return self
     */
    public function setIconImageSmall($icon_image_small)
    {
        if (is_null($icon_image_small)) {
            array_push($this->openAPINullablesSetToNull, 'icon_image_small');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_image_small', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_image_small'] = $icon_image_small;

        return $this;
    }

    /**
     * Gets minimap_image
     *
     * @return string|null
     */
    public function getMinimapImage()
    {
        return $this->container['minimap_image'];
    }

    /**
     * Sets minimap_image
     *
     * @param string|null $minimap_image minimap_image
     *
     * @return self
     */
    public function setMinimapImage($minimap_image)
    {
        if (is_null($minimap_image)) {
            array_push($this->openAPINullablesSetToNull, 'minimap_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimap_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimap_image'] = $minimap_image;

        return $this;
    }

    /**
     * Gets icon_hero_card
     *
     * @return string|null
     */
    public function getIconHeroCard()
    {
        return $this->container['icon_hero_card'];
    }

    /**
     * Sets icon_hero_card
     *
     * @param string|null $icon_hero_card icon_hero_card
     *
     * @return self
     */
    public function setIconHeroCard($icon_hero_card)
    {
        if (is_null($icon_hero_card)) {
            array_push($this->openAPINullablesSetToNull, 'icon_hero_card');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon_hero_card', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['icon_hero_card'] = $icon_hero_card;

        return $this;
    }

    /**
     * Gets top_bar_image
     *
     * @return string|null
     */
    public function getTopBarImage()
    {
        return $this->container['top_bar_image'];
    }

    /**
     * Sets top_bar_image
     *
     * @param string|null $top_bar_image top_bar_image
     *
     * @return self
     */
    public function setTopBarImage($top_bar_image)
    {
        if (is_null($top_bar_image)) {
            array_push($this->openAPINullablesSetToNull, 'top_bar_image');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('top_bar_image', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['top_bar_image'] = $top_bar_image;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \DeadlockApi\Model\HeroImages
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \DeadlockApi\Model\HeroImages $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


