<?php
/**
 * ItemInfoWeaponInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock Assets API
 *
 * API for Deadlock assets, including hero stats and images, and item stats and images.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeadlockApi\Model;

use \ArrayAccess;
use \DeadlockApi\ObjectSerializer;

/**
 * ItemInfoWeaponInfo Class Doc Comment
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemInfoWeaponInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemInfoWeaponInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'spread' => 'float',
        'standing_spread' => 'float',
        'scatter_yaw_scale' => 'float',
        'shooting_up_spread_penalty' => 'float',
        'zoom_move_speed_percent' => 'float',
        'shoot_move_speed_percent' => 'float',
        'horizontal_punch' => 'float',
        'vertical_punch' => 'float',
        'recoil_recovery_speed' => 'float',
        'vertical_recoil' => '\DeadlockApi\Model\ItemInfoWeaponInfoRecoil',
        'horizontal_recoil' => '\DeadlockApi\Model\ItemInfoWeaponInfoRecoil',
        'recoil_speed' => 'float',
        'zoom_fov' => 'float',
        'damage_falloff_start_range' => 'float',
        'damage_falloff_end_range' => 'float',
        'range' => 'float',
        'bullet_lifetime' => 'float',
        'damage_falloff_start_scale' => 'float',
        'damage_falloff_end_scale' => 'float',
        'damage_falloff_bias' => 'float',
        'bullets' => 'int',
        'cycle_time' => 'float',
        'reload_duration' => 'float',
        'clip_size' => 'int',
        'burst_shot_count' => 'int',
        'burst_shot_cooldown' => 'float',
        'bullet_gravity_scale' => 'float',
        'bullet_radius' => 'float',
        'bullet_reflect_scale' => 'float',
        'bullet_reflect_amount' => 'float',
        'bullet_inherit_shooter_velocity_scale' => 'float',
        'bullet_whiz_distance' => 'float',
        'crit_bonus_start' => 'float',
        'crit_bonus_end' => 'float',
        'crit_bonus_start_range' => 'float',
        'crit_bonus_end_range' => 'float',
        'crit_bonus_against_npcs' => 'float',
        'shoot_spread_penalty_per_shot' => 'float',
        'shoot_spread_penalty_decay_delay' => 'float',
        'shoot_spread_penalty_decay' => 'float',
        'recoil_shot_index_recovery_time_factor' => 'float',
        'can_zoom' => 'bool',
        'reload_move_speed' => 'float',
        'auto_replenish_clip' => 'float',
        'penetration_percent' => 'float',
        'npc_aiming_spread' => '\DeadlockApi\Model\NpcAimingSpread',
        'bullet_damage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'spread' => null,
        'standing_spread' => null,
        'scatter_yaw_scale' => null,
        'shooting_up_spread_penalty' => null,
        'zoom_move_speed_percent' => null,
        'shoot_move_speed_percent' => null,
        'horizontal_punch' => null,
        'vertical_punch' => null,
        'recoil_recovery_speed' => null,
        'vertical_recoil' => null,
        'horizontal_recoil' => null,
        'recoil_speed' => null,
        'zoom_fov' => null,
        'damage_falloff_start_range' => null,
        'damage_falloff_end_range' => null,
        'range' => null,
        'bullet_lifetime' => null,
        'damage_falloff_start_scale' => null,
        'damage_falloff_end_scale' => null,
        'damage_falloff_bias' => null,
        'bullets' => null,
        'cycle_time' => null,
        'reload_duration' => null,
        'clip_size' => null,
        'burst_shot_count' => null,
        'burst_shot_cooldown' => null,
        'bullet_gravity_scale' => null,
        'bullet_radius' => null,
        'bullet_reflect_scale' => null,
        'bullet_reflect_amount' => null,
        'bullet_inherit_shooter_velocity_scale' => null,
        'bullet_whiz_distance' => null,
        'crit_bonus_start' => null,
        'crit_bonus_end' => null,
        'crit_bonus_start_range' => null,
        'crit_bonus_end_range' => null,
        'crit_bonus_against_npcs' => null,
        'shoot_spread_penalty_per_shot' => null,
        'shoot_spread_penalty_decay_delay' => null,
        'shoot_spread_penalty_decay' => null,
        'recoil_shot_index_recovery_time_factor' => null,
        'can_zoom' => null,
        'reload_move_speed' => null,
        'auto_replenish_clip' => null,
        'penetration_percent' => null,
        'npc_aiming_spread' => null,
        'bullet_damage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'spread' => true,
        'standing_spread' => true,
        'scatter_yaw_scale' => true,
        'shooting_up_spread_penalty' => true,
        'zoom_move_speed_percent' => true,
        'shoot_move_speed_percent' => true,
        'horizontal_punch' => true,
        'vertical_punch' => true,
        'recoil_recovery_speed' => true,
        'vertical_recoil' => true,
        'horizontal_recoil' => true,
        'recoil_speed' => true,
        'zoom_fov' => true,
        'damage_falloff_start_range' => true,
        'damage_falloff_end_range' => true,
        'range' => true,
        'bullet_lifetime' => true,
        'damage_falloff_start_scale' => true,
        'damage_falloff_end_scale' => true,
        'damage_falloff_bias' => true,
        'bullets' => true,
        'cycle_time' => true,
        'reload_duration' => true,
        'clip_size' => true,
        'burst_shot_count' => true,
        'burst_shot_cooldown' => true,
        'bullet_gravity_scale' => true,
        'bullet_radius' => true,
        'bullet_reflect_scale' => true,
        'bullet_reflect_amount' => true,
        'bullet_inherit_shooter_velocity_scale' => true,
        'bullet_whiz_distance' => true,
        'crit_bonus_start' => true,
        'crit_bonus_end' => true,
        'crit_bonus_start_range' => true,
        'crit_bonus_end_range' => true,
        'crit_bonus_against_npcs' => true,
        'shoot_spread_penalty_per_shot' => true,
        'shoot_spread_penalty_decay_delay' => true,
        'shoot_spread_penalty_decay' => true,
        'recoil_shot_index_recovery_time_factor' => true,
        'can_zoom' => true,
        'reload_move_speed' => true,
        'auto_replenish_clip' => true,
        'penetration_percent' => true,
        'npc_aiming_spread' => true,
        'bullet_damage' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spread' => 'spread',
        'standing_spread' => 'standing_spread',
        'scatter_yaw_scale' => 'scatter_yaw_scale',
        'shooting_up_spread_penalty' => 'shooting_up_spread_penalty',
        'zoom_move_speed_percent' => 'zoom_move_speed_percent',
        'shoot_move_speed_percent' => 'shoot_move_speed_percent',
        'horizontal_punch' => 'horizontal_punch',
        'vertical_punch' => 'vertical_punch',
        'recoil_recovery_speed' => 'recoil_recovery_speed',
        'vertical_recoil' => 'vertical_recoil',
        'horizontal_recoil' => 'horizontal_recoil',
        'recoil_speed' => 'recoil_speed',
        'zoom_fov' => 'zoom_fov',
        'damage_falloff_start_range' => 'damage_falloff_start_range',
        'damage_falloff_end_range' => 'damage_falloff_end_range',
        'range' => 'range',
        'bullet_lifetime' => 'bullet_lifetime',
        'damage_falloff_start_scale' => 'damage_falloff_start_scale',
        'damage_falloff_end_scale' => 'damage_falloff_end_scale',
        'damage_falloff_bias' => 'damage_falloff_bias',
        'bullets' => 'bullets',
        'cycle_time' => 'cycle_time',
        'reload_duration' => 'reload_duration',
        'clip_size' => 'clip_size',
        'burst_shot_count' => 'burst_shot_count',
        'burst_shot_cooldown' => 'burst_shot_cooldown',
        'bullet_gravity_scale' => 'bullet_gravity_scale',
        'bullet_radius' => 'bullet_radius',
        'bullet_reflect_scale' => 'bullet_reflect_scale',
        'bullet_reflect_amount' => 'bullet_reflect_amount',
        'bullet_inherit_shooter_velocity_scale' => 'bullet_inherit_shooter_velocity_scale',
        'bullet_whiz_distance' => 'bullet_whiz_distance',
        'crit_bonus_start' => 'crit_bonus_start',
        'crit_bonus_end' => 'crit_bonus_end',
        'crit_bonus_start_range' => 'crit_bonus_start_range',
        'crit_bonus_end_range' => 'crit_bonus_end_range',
        'crit_bonus_against_npcs' => 'crit_bonus_against_npcs',
        'shoot_spread_penalty_per_shot' => 'shoot_spread_penalty_per_shot',
        'shoot_spread_penalty_decay_delay' => 'shoot_spread_penalty_decay_delay',
        'shoot_spread_penalty_decay' => 'shoot_spread_penalty_decay',
        'recoil_shot_index_recovery_time_factor' => 'recoil_shot_index_recovery_time_factor',
        'can_zoom' => 'can_zoom',
        'reload_move_speed' => 'reload_move_speed',
        'auto_replenish_clip' => 'auto_replenish_clip',
        'penetration_percent' => 'penetration_percent',
        'npc_aiming_spread' => 'npc_aiming_spread',
        'bullet_damage' => 'bullet_damage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spread' => 'setSpread',
        'standing_spread' => 'setStandingSpread',
        'scatter_yaw_scale' => 'setScatterYawScale',
        'shooting_up_spread_penalty' => 'setShootingUpSpreadPenalty',
        'zoom_move_speed_percent' => 'setZoomMoveSpeedPercent',
        'shoot_move_speed_percent' => 'setShootMoveSpeedPercent',
        'horizontal_punch' => 'setHorizontalPunch',
        'vertical_punch' => 'setVerticalPunch',
        'recoil_recovery_speed' => 'setRecoilRecoverySpeed',
        'vertical_recoil' => 'setVerticalRecoil',
        'horizontal_recoil' => 'setHorizontalRecoil',
        'recoil_speed' => 'setRecoilSpeed',
        'zoom_fov' => 'setZoomFov',
        'damage_falloff_start_range' => 'setDamageFalloffStartRange',
        'damage_falloff_end_range' => 'setDamageFalloffEndRange',
        'range' => 'setRange',
        'bullet_lifetime' => 'setBulletLifetime',
        'damage_falloff_start_scale' => 'setDamageFalloffStartScale',
        'damage_falloff_end_scale' => 'setDamageFalloffEndScale',
        'damage_falloff_bias' => 'setDamageFalloffBias',
        'bullets' => 'setBullets',
        'cycle_time' => 'setCycleTime',
        'reload_duration' => 'setReloadDuration',
        'clip_size' => 'setClipSize',
        'burst_shot_count' => 'setBurstShotCount',
        'burst_shot_cooldown' => 'setBurstShotCooldown',
        'bullet_gravity_scale' => 'setBulletGravityScale',
        'bullet_radius' => 'setBulletRadius',
        'bullet_reflect_scale' => 'setBulletReflectScale',
        'bullet_reflect_amount' => 'setBulletReflectAmount',
        'bullet_inherit_shooter_velocity_scale' => 'setBulletInheritShooterVelocityScale',
        'bullet_whiz_distance' => 'setBulletWhizDistance',
        'crit_bonus_start' => 'setCritBonusStart',
        'crit_bonus_end' => 'setCritBonusEnd',
        'crit_bonus_start_range' => 'setCritBonusStartRange',
        'crit_bonus_end_range' => 'setCritBonusEndRange',
        'crit_bonus_against_npcs' => 'setCritBonusAgainstNpcs',
        'shoot_spread_penalty_per_shot' => 'setShootSpreadPenaltyPerShot',
        'shoot_spread_penalty_decay_delay' => 'setShootSpreadPenaltyDecayDelay',
        'shoot_spread_penalty_decay' => 'setShootSpreadPenaltyDecay',
        'recoil_shot_index_recovery_time_factor' => 'setRecoilShotIndexRecoveryTimeFactor',
        'can_zoom' => 'setCanZoom',
        'reload_move_speed' => 'setReloadMoveSpeed',
        'auto_replenish_clip' => 'setAutoReplenishClip',
        'penetration_percent' => 'setPenetrationPercent',
        'npc_aiming_spread' => 'setNpcAimingSpread',
        'bullet_damage' => 'setBulletDamage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spread' => 'getSpread',
        'standing_spread' => 'getStandingSpread',
        'scatter_yaw_scale' => 'getScatterYawScale',
        'shooting_up_spread_penalty' => 'getShootingUpSpreadPenalty',
        'zoom_move_speed_percent' => 'getZoomMoveSpeedPercent',
        'shoot_move_speed_percent' => 'getShootMoveSpeedPercent',
        'horizontal_punch' => 'getHorizontalPunch',
        'vertical_punch' => 'getVerticalPunch',
        'recoil_recovery_speed' => 'getRecoilRecoverySpeed',
        'vertical_recoil' => 'getVerticalRecoil',
        'horizontal_recoil' => 'getHorizontalRecoil',
        'recoil_speed' => 'getRecoilSpeed',
        'zoom_fov' => 'getZoomFov',
        'damage_falloff_start_range' => 'getDamageFalloffStartRange',
        'damage_falloff_end_range' => 'getDamageFalloffEndRange',
        'range' => 'getRange',
        'bullet_lifetime' => 'getBulletLifetime',
        'damage_falloff_start_scale' => 'getDamageFalloffStartScale',
        'damage_falloff_end_scale' => 'getDamageFalloffEndScale',
        'damage_falloff_bias' => 'getDamageFalloffBias',
        'bullets' => 'getBullets',
        'cycle_time' => 'getCycleTime',
        'reload_duration' => 'getReloadDuration',
        'clip_size' => 'getClipSize',
        'burst_shot_count' => 'getBurstShotCount',
        'burst_shot_cooldown' => 'getBurstShotCooldown',
        'bullet_gravity_scale' => 'getBulletGravityScale',
        'bullet_radius' => 'getBulletRadius',
        'bullet_reflect_scale' => 'getBulletReflectScale',
        'bullet_reflect_amount' => 'getBulletReflectAmount',
        'bullet_inherit_shooter_velocity_scale' => 'getBulletInheritShooterVelocityScale',
        'bullet_whiz_distance' => 'getBulletWhizDistance',
        'crit_bonus_start' => 'getCritBonusStart',
        'crit_bonus_end' => 'getCritBonusEnd',
        'crit_bonus_start_range' => 'getCritBonusStartRange',
        'crit_bonus_end_range' => 'getCritBonusEndRange',
        'crit_bonus_against_npcs' => 'getCritBonusAgainstNpcs',
        'shoot_spread_penalty_per_shot' => 'getShootSpreadPenaltyPerShot',
        'shoot_spread_penalty_decay_delay' => 'getShootSpreadPenaltyDecayDelay',
        'shoot_spread_penalty_decay' => 'getShootSpreadPenaltyDecay',
        'recoil_shot_index_recovery_time_factor' => 'getRecoilShotIndexRecoveryTimeFactor',
        'can_zoom' => 'getCanZoom',
        'reload_move_speed' => 'getReloadMoveSpeed',
        'auto_replenish_clip' => 'getAutoReplenishClip',
        'penetration_percent' => 'getPenetrationPercent',
        'npc_aiming_spread' => 'getNpcAimingSpread',
        'bullet_damage' => 'getBulletDamage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('spread', $data ?? [], null);
        $this->setIfExists('standing_spread', $data ?? [], null);
        $this->setIfExists('scatter_yaw_scale', $data ?? [], null);
        $this->setIfExists('shooting_up_spread_penalty', $data ?? [], null);
        $this->setIfExists('zoom_move_speed_percent', $data ?? [], null);
        $this->setIfExists('shoot_move_speed_percent', $data ?? [], null);
        $this->setIfExists('horizontal_punch', $data ?? [], null);
        $this->setIfExists('vertical_punch', $data ?? [], null);
        $this->setIfExists('recoil_recovery_speed', $data ?? [], null);
        $this->setIfExists('vertical_recoil', $data ?? [], null);
        $this->setIfExists('horizontal_recoil', $data ?? [], null);
        $this->setIfExists('recoil_speed', $data ?? [], null);
        $this->setIfExists('zoom_fov', $data ?? [], null);
        $this->setIfExists('damage_falloff_start_range', $data ?? [], null);
        $this->setIfExists('damage_falloff_end_range', $data ?? [], null);
        $this->setIfExists('range', $data ?? [], null);
        $this->setIfExists('bullet_lifetime', $data ?? [], null);
        $this->setIfExists('damage_falloff_start_scale', $data ?? [], null);
        $this->setIfExists('damage_falloff_end_scale', $data ?? [], null);
        $this->setIfExists('damage_falloff_bias', $data ?? [], null);
        $this->setIfExists('bullets', $data ?? [], null);
        $this->setIfExists('cycle_time', $data ?? [], null);
        $this->setIfExists('reload_duration', $data ?? [], null);
        $this->setIfExists('clip_size', $data ?? [], null);
        $this->setIfExists('burst_shot_count', $data ?? [], null);
        $this->setIfExists('burst_shot_cooldown', $data ?? [], null);
        $this->setIfExists('bullet_gravity_scale', $data ?? [], null);
        $this->setIfExists('bullet_radius', $data ?? [], null);
        $this->setIfExists('bullet_reflect_scale', $data ?? [], null);
        $this->setIfExists('bullet_reflect_amount', $data ?? [], null);
        $this->setIfExists('bullet_inherit_shooter_velocity_scale', $data ?? [], null);
        $this->setIfExists('bullet_whiz_distance', $data ?? [], null);
        $this->setIfExists('crit_bonus_start', $data ?? [], null);
        $this->setIfExists('crit_bonus_end', $data ?? [], null);
        $this->setIfExists('crit_bonus_start_range', $data ?? [], null);
        $this->setIfExists('crit_bonus_end_range', $data ?? [], null);
        $this->setIfExists('crit_bonus_against_npcs', $data ?? [], null);
        $this->setIfExists('shoot_spread_penalty_per_shot', $data ?? [], null);
        $this->setIfExists('shoot_spread_penalty_decay_delay', $data ?? [], null);
        $this->setIfExists('shoot_spread_penalty_decay', $data ?? [], null);
        $this->setIfExists('recoil_shot_index_recovery_time_factor', $data ?? [], null);
        $this->setIfExists('can_zoom', $data ?? [], null);
        $this->setIfExists('reload_move_speed', $data ?? [], null);
        $this->setIfExists('auto_replenish_clip', $data ?? [], null);
        $this->setIfExists('penetration_percent', $data ?? [], null);
        $this->setIfExists('npc_aiming_spread', $data ?? [], null);
        $this->setIfExists('bullet_damage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets spread
     *
     * @return float|null
     */
    public function getSpread()
    {
        return $this->container['spread'];
    }

    /**
     * Sets spread
     *
     * @param float|null $spread spread
     *
     * @return self
     */
    public function setSpread($spread)
    {
        if (is_null($spread)) {
            array_push($this->openAPINullablesSetToNull, 'spread');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spread', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spread'] = $spread;

        return $this;
    }

    /**
     * Gets standing_spread
     *
     * @return float|null
     */
    public function getStandingSpread()
    {
        return $this->container['standing_spread'];
    }

    /**
     * Sets standing_spread
     *
     * @param float|null $standing_spread standing_spread
     *
     * @return self
     */
    public function setStandingSpread($standing_spread)
    {
        if (is_null($standing_spread)) {
            array_push($this->openAPINullablesSetToNull, 'standing_spread');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('standing_spread', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['standing_spread'] = $standing_spread;

        return $this;
    }

    /**
     * Gets scatter_yaw_scale
     *
     * @return float|null
     */
    public function getScatterYawScale()
    {
        return $this->container['scatter_yaw_scale'];
    }

    /**
     * Sets scatter_yaw_scale
     *
     * @param float|null $scatter_yaw_scale scatter_yaw_scale
     *
     * @return self
     */
    public function setScatterYawScale($scatter_yaw_scale)
    {
        if (is_null($scatter_yaw_scale)) {
            array_push($this->openAPINullablesSetToNull, 'scatter_yaw_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scatter_yaw_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scatter_yaw_scale'] = $scatter_yaw_scale;

        return $this;
    }

    /**
     * Gets shooting_up_spread_penalty
     *
     * @return float|null
     */
    public function getShootingUpSpreadPenalty()
    {
        return $this->container['shooting_up_spread_penalty'];
    }

    /**
     * Sets shooting_up_spread_penalty
     *
     * @param float|null $shooting_up_spread_penalty shooting_up_spread_penalty
     *
     * @return self
     */
    public function setShootingUpSpreadPenalty($shooting_up_spread_penalty)
    {
        if (is_null($shooting_up_spread_penalty)) {
            array_push($this->openAPINullablesSetToNull, 'shooting_up_spread_penalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shooting_up_spread_penalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shooting_up_spread_penalty'] = $shooting_up_spread_penalty;

        return $this;
    }

    /**
     * Gets zoom_move_speed_percent
     *
     * @return float|null
     */
    public function getZoomMoveSpeedPercent()
    {
        return $this->container['zoom_move_speed_percent'];
    }

    /**
     * Sets zoom_move_speed_percent
     *
     * @param float|null $zoom_move_speed_percent zoom_move_speed_percent
     *
     * @return self
     */
    public function setZoomMoveSpeedPercent($zoom_move_speed_percent)
    {
        if (is_null($zoom_move_speed_percent)) {
            array_push($this->openAPINullablesSetToNull, 'zoom_move_speed_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zoom_move_speed_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zoom_move_speed_percent'] = $zoom_move_speed_percent;

        return $this;
    }

    /**
     * Gets shoot_move_speed_percent
     *
     * @return float|null
     */
    public function getShootMoveSpeedPercent()
    {
        return $this->container['shoot_move_speed_percent'];
    }

    /**
     * Sets shoot_move_speed_percent
     *
     * @param float|null $shoot_move_speed_percent shoot_move_speed_percent
     *
     * @return self
     */
    public function setShootMoveSpeedPercent($shoot_move_speed_percent)
    {
        if (is_null($shoot_move_speed_percent)) {
            array_push($this->openAPINullablesSetToNull, 'shoot_move_speed_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shoot_move_speed_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shoot_move_speed_percent'] = $shoot_move_speed_percent;

        return $this;
    }

    /**
     * Gets horizontal_punch
     *
     * @return float|null
     */
    public function getHorizontalPunch()
    {
        return $this->container['horizontal_punch'];
    }

    /**
     * Sets horizontal_punch
     *
     * @param float|null $horizontal_punch horizontal_punch
     *
     * @return self
     */
    public function setHorizontalPunch($horizontal_punch)
    {
        if (is_null($horizontal_punch)) {
            array_push($this->openAPINullablesSetToNull, 'horizontal_punch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('horizontal_punch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['horizontal_punch'] = $horizontal_punch;

        return $this;
    }

    /**
     * Gets vertical_punch
     *
     * @return float|null
     */
    public function getVerticalPunch()
    {
        return $this->container['vertical_punch'];
    }

    /**
     * Sets vertical_punch
     *
     * @param float|null $vertical_punch vertical_punch
     *
     * @return self
     */
    public function setVerticalPunch($vertical_punch)
    {
        if (is_null($vertical_punch)) {
            array_push($this->openAPINullablesSetToNull, 'vertical_punch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vertical_punch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vertical_punch'] = $vertical_punch;

        return $this;
    }

    /**
     * Gets recoil_recovery_speed
     *
     * @return float|null
     */
    public function getRecoilRecoverySpeed()
    {
        return $this->container['recoil_recovery_speed'];
    }

    /**
     * Sets recoil_recovery_speed
     *
     * @param float|null $recoil_recovery_speed recoil_recovery_speed
     *
     * @return self
     */
    public function setRecoilRecoverySpeed($recoil_recovery_speed)
    {
        if (is_null($recoil_recovery_speed)) {
            array_push($this->openAPINullablesSetToNull, 'recoil_recovery_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recoil_recovery_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recoil_recovery_speed'] = $recoil_recovery_speed;

        return $this;
    }

    /**
     * Gets vertical_recoil
     *
     * @return \DeadlockApi\Model\ItemInfoWeaponInfoRecoil|null
     */
    public function getVerticalRecoil()
    {
        return $this->container['vertical_recoil'];
    }

    /**
     * Sets vertical_recoil
     *
     * @param \DeadlockApi\Model\ItemInfoWeaponInfoRecoil|null $vertical_recoil vertical_recoil
     *
     * @return self
     */
    public function setVerticalRecoil($vertical_recoil)
    {
        if (is_null($vertical_recoil)) {
            array_push($this->openAPINullablesSetToNull, 'vertical_recoil');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vertical_recoil', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vertical_recoil'] = $vertical_recoil;

        return $this;
    }

    /**
     * Gets horizontal_recoil
     *
     * @return \DeadlockApi\Model\ItemInfoWeaponInfoRecoil|null
     */
    public function getHorizontalRecoil()
    {
        return $this->container['horizontal_recoil'];
    }

    /**
     * Sets horizontal_recoil
     *
     * @param \DeadlockApi\Model\ItemInfoWeaponInfoRecoil|null $horizontal_recoil horizontal_recoil
     *
     * @return self
     */
    public function setHorizontalRecoil($horizontal_recoil)
    {
        if (is_null($horizontal_recoil)) {
            array_push($this->openAPINullablesSetToNull, 'horizontal_recoil');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('horizontal_recoil', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['horizontal_recoil'] = $horizontal_recoil;

        return $this;
    }

    /**
     * Gets recoil_speed
     *
     * @return float|null
     */
    public function getRecoilSpeed()
    {
        return $this->container['recoil_speed'];
    }

    /**
     * Sets recoil_speed
     *
     * @param float|null $recoil_speed recoil_speed
     *
     * @return self
     */
    public function setRecoilSpeed($recoil_speed)
    {
        if (is_null($recoil_speed)) {
            array_push($this->openAPINullablesSetToNull, 'recoil_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recoil_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recoil_speed'] = $recoil_speed;

        return $this;
    }

    /**
     * Gets zoom_fov
     *
     * @return float|null
     */
    public function getZoomFov()
    {
        return $this->container['zoom_fov'];
    }

    /**
     * Sets zoom_fov
     *
     * @param float|null $zoom_fov zoom_fov
     *
     * @return self
     */
    public function setZoomFov($zoom_fov)
    {
        if (is_null($zoom_fov)) {
            array_push($this->openAPINullablesSetToNull, 'zoom_fov');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zoom_fov', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zoom_fov'] = $zoom_fov;

        return $this;
    }

    /**
     * Gets damage_falloff_start_range
     *
     * @return float|null
     */
    public function getDamageFalloffStartRange()
    {
        return $this->container['damage_falloff_start_range'];
    }

    /**
     * Sets damage_falloff_start_range
     *
     * @param float|null $damage_falloff_start_range damage_falloff_start_range
     *
     * @return self
     */
    public function setDamageFalloffStartRange($damage_falloff_start_range)
    {
        if (is_null($damage_falloff_start_range)) {
            array_push($this->openAPINullablesSetToNull, 'damage_falloff_start_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('damage_falloff_start_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['damage_falloff_start_range'] = $damage_falloff_start_range;

        return $this;
    }

    /**
     * Gets damage_falloff_end_range
     *
     * @return float|null
     */
    public function getDamageFalloffEndRange()
    {
        return $this->container['damage_falloff_end_range'];
    }

    /**
     * Sets damage_falloff_end_range
     *
     * @param float|null $damage_falloff_end_range damage_falloff_end_range
     *
     * @return self
     */
    public function setDamageFalloffEndRange($damage_falloff_end_range)
    {
        if (is_null($damage_falloff_end_range)) {
            array_push($this->openAPINullablesSetToNull, 'damage_falloff_end_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('damage_falloff_end_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['damage_falloff_end_range'] = $damage_falloff_end_range;

        return $this;
    }

    /**
     * Gets range
     *
     * @return float|null
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param float|null $range range
     *
     * @return self
     */
    public function setRange($range)
    {
        if (is_null($range)) {
            array_push($this->openAPINullablesSetToNull, 'range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets bullet_lifetime
     *
     * @return float|null
     */
    public function getBulletLifetime()
    {
        return $this->container['bullet_lifetime'];
    }

    /**
     * Sets bullet_lifetime
     *
     * @param float|null $bullet_lifetime bullet_lifetime
     *
     * @return self
     */
    public function setBulletLifetime($bullet_lifetime)
    {
        if (is_null($bullet_lifetime)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_lifetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_lifetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_lifetime'] = $bullet_lifetime;

        return $this;
    }

    /**
     * Gets damage_falloff_start_scale
     *
     * @return float|null
     */
    public function getDamageFalloffStartScale()
    {
        return $this->container['damage_falloff_start_scale'];
    }

    /**
     * Sets damage_falloff_start_scale
     *
     * @param float|null $damage_falloff_start_scale damage_falloff_start_scale
     *
     * @return self
     */
    public function setDamageFalloffStartScale($damage_falloff_start_scale)
    {
        if (is_null($damage_falloff_start_scale)) {
            array_push($this->openAPINullablesSetToNull, 'damage_falloff_start_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('damage_falloff_start_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['damage_falloff_start_scale'] = $damage_falloff_start_scale;

        return $this;
    }

    /**
     * Gets damage_falloff_end_scale
     *
     * @return float|null
     */
    public function getDamageFalloffEndScale()
    {
        return $this->container['damage_falloff_end_scale'];
    }

    /**
     * Sets damage_falloff_end_scale
     *
     * @param float|null $damage_falloff_end_scale damage_falloff_end_scale
     *
     * @return self
     */
    public function setDamageFalloffEndScale($damage_falloff_end_scale)
    {
        if (is_null($damage_falloff_end_scale)) {
            array_push($this->openAPINullablesSetToNull, 'damage_falloff_end_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('damage_falloff_end_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['damage_falloff_end_scale'] = $damage_falloff_end_scale;

        return $this;
    }

    /**
     * Gets damage_falloff_bias
     *
     * @return float|null
     */
    public function getDamageFalloffBias()
    {
        return $this->container['damage_falloff_bias'];
    }

    /**
     * Sets damage_falloff_bias
     *
     * @param float|null $damage_falloff_bias damage_falloff_bias
     *
     * @return self
     */
    public function setDamageFalloffBias($damage_falloff_bias)
    {
        if (is_null($damage_falloff_bias)) {
            array_push($this->openAPINullablesSetToNull, 'damage_falloff_bias');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('damage_falloff_bias', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['damage_falloff_bias'] = $damage_falloff_bias;

        return $this;
    }

    /**
     * Gets bullets
     *
     * @return int|null
     */
    public function getBullets()
    {
        return $this->container['bullets'];
    }

    /**
     * Sets bullets
     *
     * @param int|null $bullets bullets
     *
     * @return self
     */
    public function setBullets($bullets)
    {
        if (is_null($bullets)) {
            array_push($this->openAPINullablesSetToNull, 'bullets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullets', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullets'] = $bullets;

        return $this;
    }

    /**
     * Gets cycle_time
     *
     * @return float|null
     */
    public function getCycleTime()
    {
        return $this->container['cycle_time'];
    }

    /**
     * Sets cycle_time
     *
     * @param float|null $cycle_time cycle_time
     *
     * @return self
     */
    public function setCycleTime($cycle_time)
    {
        if (is_null($cycle_time)) {
            array_push($this->openAPINullablesSetToNull, 'cycle_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cycle_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cycle_time'] = $cycle_time;

        return $this;
    }

    /**
     * Gets reload_duration
     *
     * @return float|null
     */
    public function getReloadDuration()
    {
        return $this->container['reload_duration'];
    }

    /**
     * Sets reload_duration
     *
     * @param float|null $reload_duration reload_duration
     *
     * @return self
     */
    public function setReloadDuration($reload_duration)
    {
        if (is_null($reload_duration)) {
            array_push($this->openAPINullablesSetToNull, 'reload_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reload_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reload_duration'] = $reload_duration;

        return $this;
    }

    /**
     * Gets clip_size
     *
     * @return int|null
     */
    public function getClipSize()
    {
        return $this->container['clip_size'];
    }

    /**
     * Sets clip_size
     *
     * @param int|null $clip_size clip_size
     *
     * @return self
     */
    public function setClipSize($clip_size)
    {
        if (is_null($clip_size)) {
            array_push($this->openAPINullablesSetToNull, 'clip_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clip_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clip_size'] = $clip_size;

        return $this;
    }

    /**
     * Gets burst_shot_count
     *
     * @return int|null
     */
    public function getBurstShotCount()
    {
        return $this->container['burst_shot_count'];
    }

    /**
     * Sets burst_shot_count
     *
     * @param int|null $burst_shot_count burst_shot_count
     *
     * @return self
     */
    public function setBurstShotCount($burst_shot_count)
    {
        if (is_null($burst_shot_count)) {
            array_push($this->openAPINullablesSetToNull, 'burst_shot_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('burst_shot_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['burst_shot_count'] = $burst_shot_count;

        return $this;
    }

    /**
     * Gets burst_shot_cooldown
     *
     * @return float|null
     */
    public function getBurstShotCooldown()
    {
        return $this->container['burst_shot_cooldown'];
    }

    /**
     * Sets burst_shot_cooldown
     *
     * @param float|null $burst_shot_cooldown burst_shot_cooldown
     *
     * @return self
     */
    public function setBurstShotCooldown($burst_shot_cooldown)
    {
        if (is_null($burst_shot_cooldown)) {
            array_push($this->openAPINullablesSetToNull, 'burst_shot_cooldown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('burst_shot_cooldown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['burst_shot_cooldown'] = $burst_shot_cooldown;

        return $this;
    }

    /**
     * Gets bullet_gravity_scale
     *
     * @return float|null
     */
    public function getBulletGravityScale()
    {
        return $this->container['bullet_gravity_scale'];
    }

    /**
     * Sets bullet_gravity_scale
     *
     * @param float|null $bullet_gravity_scale bullet_gravity_scale
     *
     * @return self
     */
    public function setBulletGravityScale($bullet_gravity_scale)
    {
        if (is_null($bullet_gravity_scale)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_gravity_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_gravity_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_gravity_scale'] = $bullet_gravity_scale;

        return $this;
    }

    /**
     * Gets bullet_radius
     *
     * @return float|null
     */
    public function getBulletRadius()
    {
        return $this->container['bullet_radius'];
    }

    /**
     * Sets bullet_radius
     *
     * @param float|null $bullet_radius bullet_radius
     *
     * @return self
     */
    public function setBulletRadius($bullet_radius)
    {
        if (is_null($bullet_radius)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_radius');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_radius', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_radius'] = $bullet_radius;

        return $this;
    }

    /**
     * Gets bullet_reflect_scale
     *
     * @return float|null
     */
    public function getBulletReflectScale()
    {
        return $this->container['bullet_reflect_scale'];
    }

    /**
     * Sets bullet_reflect_scale
     *
     * @param float|null $bullet_reflect_scale bullet_reflect_scale
     *
     * @return self
     */
    public function setBulletReflectScale($bullet_reflect_scale)
    {
        if (is_null($bullet_reflect_scale)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_reflect_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_reflect_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_reflect_scale'] = $bullet_reflect_scale;

        return $this;
    }

    /**
     * Gets bullet_reflect_amount
     *
     * @return float|null
     */
    public function getBulletReflectAmount()
    {
        return $this->container['bullet_reflect_amount'];
    }

    /**
     * Sets bullet_reflect_amount
     *
     * @param float|null $bullet_reflect_amount bullet_reflect_amount
     *
     * @return self
     */
    public function setBulletReflectAmount($bullet_reflect_amount)
    {
        if (is_null($bullet_reflect_amount)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_reflect_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_reflect_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_reflect_amount'] = $bullet_reflect_amount;

        return $this;
    }

    /**
     * Gets bullet_inherit_shooter_velocity_scale
     *
     * @return float|null
     */
    public function getBulletInheritShooterVelocityScale()
    {
        return $this->container['bullet_inherit_shooter_velocity_scale'];
    }

    /**
     * Sets bullet_inherit_shooter_velocity_scale
     *
     * @param float|null $bullet_inherit_shooter_velocity_scale bullet_inherit_shooter_velocity_scale
     *
     * @return self
     */
    public function setBulletInheritShooterVelocityScale($bullet_inherit_shooter_velocity_scale)
    {
        if (is_null($bullet_inherit_shooter_velocity_scale)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_inherit_shooter_velocity_scale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_inherit_shooter_velocity_scale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_inherit_shooter_velocity_scale'] = $bullet_inherit_shooter_velocity_scale;

        return $this;
    }

    /**
     * Gets bullet_whiz_distance
     *
     * @return float|null
     */
    public function getBulletWhizDistance()
    {
        return $this->container['bullet_whiz_distance'];
    }

    /**
     * Sets bullet_whiz_distance
     *
     * @param float|null $bullet_whiz_distance bullet_whiz_distance
     *
     * @return self
     */
    public function setBulletWhizDistance($bullet_whiz_distance)
    {
        if (is_null($bullet_whiz_distance)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_whiz_distance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_whiz_distance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_whiz_distance'] = $bullet_whiz_distance;

        return $this;
    }

    /**
     * Gets crit_bonus_start
     *
     * @return float|null
     */
    public function getCritBonusStart()
    {
        return $this->container['crit_bonus_start'];
    }

    /**
     * Sets crit_bonus_start
     *
     * @param float|null $crit_bonus_start crit_bonus_start
     *
     * @return self
     */
    public function setCritBonusStart($crit_bonus_start)
    {
        if (is_null($crit_bonus_start)) {
            array_push($this->openAPINullablesSetToNull, 'crit_bonus_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crit_bonus_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crit_bonus_start'] = $crit_bonus_start;

        return $this;
    }

    /**
     * Gets crit_bonus_end
     *
     * @return float|null
     */
    public function getCritBonusEnd()
    {
        return $this->container['crit_bonus_end'];
    }

    /**
     * Sets crit_bonus_end
     *
     * @param float|null $crit_bonus_end crit_bonus_end
     *
     * @return self
     */
    public function setCritBonusEnd($crit_bonus_end)
    {
        if (is_null($crit_bonus_end)) {
            array_push($this->openAPINullablesSetToNull, 'crit_bonus_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crit_bonus_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crit_bonus_end'] = $crit_bonus_end;

        return $this;
    }

    /**
     * Gets crit_bonus_start_range
     *
     * @return float|null
     */
    public function getCritBonusStartRange()
    {
        return $this->container['crit_bonus_start_range'];
    }

    /**
     * Sets crit_bonus_start_range
     *
     * @param float|null $crit_bonus_start_range crit_bonus_start_range
     *
     * @return self
     */
    public function setCritBonusStartRange($crit_bonus_start_range)
    {
        if (is_null($crit_bonus_start_range)) {
            array_push($this->openAPINullablesSetToNull, 'crit_bonus_start_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crit_bonus_start_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crit_bonus_start_range'] = $crit_bonus_start_range;

        return $this;
    }

    /**
     * Gets crit_bonus_end_range
     *
     * @return float|null
     */
    public function getCritBonusEndRange()
    {
        return $this->container['crit_bonus_end_range'];
    }

    /**
     * Sets crit_bonus_end_range
     *
     * @param float|null $crit_bonus_end_range crit_bonus_end_range
     *
     * @return self
     */
    public function setCritBonusEndRange($crit_bonus_end_range)
    {
        if (is_null($crit_bonus_end_range)) {
            array_push($this->openAPINullablesSetToNull, 'crit_bonus_end_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crit_bonus_end_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crit_bonus_end_range'] = $crit_bonus_end_range;

        return $this;
    }

    /**
     * Gets crit_bonus_against_npcs
     *
     * @return float|null
     */
    public function getCritBonusAgainstNpcs()
    {
        return $this->container['crit_bonus_against_npcs'];
    }

    /**
     * Sets crit_bonus_against_npcs
     *
     * @param float|null $crit_bonus_against_npcs crit_bonus_against_npcs
     *
     * @return self
     */
    public function setCritBonusAgainstNpcs($crit_bonus_against_npcs)
    {
        if (is_null($crit_bonus_against_npcs)) {
            array_push($this->openAPINullablesSetToNull, 'crit_bonus_against_npcs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crit_bonus_against_npcs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['crit_bonus_against_npcs'] = $crit_bonus_against_npcs;

        return $this;
    }

    /**
     * Gets shoot_spread_penalty_per_shot
     *
     * @return float|null
     */
    public function getShootSpreadPenaltyPerShot()
    {
        return $this->container['shoot_spread_penalty_per_shot'];
    }

    /**
     * Sets shoot_spread_penalty_per_shot
     *
     * @param float|null $shoot_spread_penalty_per_shot shoot_spread_penalty_per_shot
     *
     * @return self
     */
    public function setShootSpreadPenaltyPerShot($shoot_spread_penalty_per_shot)
    {
        if (is_null($shoot_spread_penalty_per_shot)) {
            array_push($this->openAPINullablesSetToNull, 'shoot_spread_penalty_per_shot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shoot_spread_penalty_per_shot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shoot_spread_penalty_per_shot'] = $shoot_spread_penalty_per_shot;

        return $this;
    }

    /**
     * Gets shoot_spread_penalty_decay_delay
     *
     * @return float|null
     */
    public function getShootSpreadPenaltyDecayDelay()
    {
        return $this->container['shoot_spread_penalty_decay_delay'];
    }

    /**
     * Sets shoot_spread_penalty_decay_delay
     *
     * @param float|null $shoot_spread_penalty_decay_delay shoot_spread_penalty_decay_delay
     *
     * @return self
     */
    public function setShootSpreadPenaltyDecayDelay($shoot_spread_penalty_decay_delay)
    {
        if (is_null($shoot_spread_penalty_decay_delay)) {
            array_push($this->openAPINullablesSetToNull, 'shoot_spread_penalty_decay_delay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shoot_spread_penalty_decay_delay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shoot_spread_penalty_decay_delay'] = $shoot_spread_penalty_decay_delay;

        return $this;
    }

    /**
     * Gets shoot_spread_penalty_decay
     *
     * @return float|null
     */
    public function getShootSpreadPenaltyDecay()
    {
        return $this->container['shoot_spread_penalty_decay'];
    }

    /**
     * Sets shoot_spread_penalty_decay
     *
     * @param float|null $shoot_spread_penalty_decay shoot_spread_penalty_decay
     *
     * @return self
     */
    public function setShootSpreadPenaltyDecay($shoot_spread_penalty_decay)
    {
        if (is_null($shoot_spread_penalty_decay)) {
            array_push($this->openAPINullablesSetToNull, 'shoot_spread_penalty_decay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shoot_spread_penalty_decay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shoot_spread_penalty_decay'] = $shoot_spread_penalty_decay;

        return $this;
    }

    /**
     * Gets recoil_shot_index_recovery_time_factor
     *
     * @return float|null
     */
    public function getRecoilShotIndexRecoveryTimeFactor()
    {
        return $this->container['recoil_shot_index_recovery_time_factor'];
    }

    /**
     * Sets recoil_shot_index_recovery_time_factor
     *
     * @param float|null $recoil_shot_index_recovery_time_factor recoil_shot_index_recovery_time_factor
     *
     * @return self
     */
    public function setRecoilShotIndexRecoveryTimeFactor($recoil_shot_index_recovery_time_factor)
    {
        if (is_null($recoil_shot_index_recovery_time_factor)) {
            array_push($this->openAPINullablesSetToNull, 'recoil_shot_index_recovery_time_factor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recoil_shot_index_recovery_time_factor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recoil_shot_index_recovery_time_factor'] = $recoil_shot_index_recovery_time_factor;

        return $this;
    }

    /**
     * Gets can_zoom
     *
     * @return bool|null
     */
    public function getCanZoom()
    {
        return $this->container['can_zoom'];
    }

    /**
     * Sets can_zoom
     *
     * @param bool|null $can_zoom can_zoom
     *
     * @return self
     */
    public function setCanZoom($can_zoom)
    {
        if (is_null($can_zoom)) {
            array_push($this->openAPINullablesSetToNull, 'can_zoom');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('can_zoom', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['can_zoom'] = $can_zoom;

        return $this;
    }

    /**
     * Gets reload_move_speed
     *
     * @return float|null
     */
    public function getReloadMoveSpeed()
    {
        return $this->container['reload_move_speed'];
    }

    /**
     * Sets reload_move_speed
     *
     * @param float|null $reload_move_speed reload_move_speed
     *
     * @return self
     */
    public function setReloadMoveSpeed($reload_move_speed)
    {
        if (is_null($reload_move_speed)) {
            array_push($this->openAPINullablesSetToNull, 'reload_move_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reload_move_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reload_move_speed'] = $reload_move_speed;

        return $this;
    }

    /**
     * Gets auto_replenish_clip
     *
     * @return float|null
     */
    public function getAutoReplenishClip()
    {
        return $this->container['auto_replenish_clip'];
    }

    /**
     * Sets auto_replenish_clip
     *
     * @param float|null $auto_replenish_clip auto_replenish_clip
     *
     * @return self
     */
    public function setAutoReplenishClip($auto_replenish_clip)
    {
        if (is_null($auto_replenish_clip)) {
            array_push($this->openAPINullablesSetToNull, 'auto_replenish_clip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_replenish_clip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_replenish_clip'] = $auto_replenish_clip;

        return $this;
    }

    /**
     * Gets penetration_percent
     *
     * @return float|null
     */
    public function getPenetrationPercent()
    {
        return $this->container['penetration_percent'];
    }

    /**
     * Sets penetration_percent
     *
     * @param float|null $penetration_percent penetration_percent
     *
     * @return self
     */
    public function setPenetrationPercent($penetration_percent)
    {
        if (is_null($penetration_percent)) {
            array_push($this->openAPINullablesSetToNull, 'penetration_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('penetration_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['penetration_percent'] = $penetration_percent;

        return $this;
    }

    /**
     * Gets npc_aiming_spread
     *
     * @return \DeadlockApi\Model\NpcAimingSpread|null
     */
    public function getNpcAimingSpread()
    {
        return $this->container['npc_aiming_spread'];
    }

    /**
     * Sets npc_aiming_spread
     *
     * @param \DeadlockApi\Model\NpcAimingSpread|null $npc_aiming_spread npc_aiming_spread
     *
     * @return self
     */
    public function setNpcAimingSpread($npc_aiming_spread)
    {
        if (is_null($npc_aiming_spread)) {
            array_push($this->openAPINullablesSetToNull, 'npc_aiming_spread');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('npc_aiming_spread', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['npc_aiming_spread'] = $npc_aiming_spread;

        return $this;
    }

    /**
     * Gets bullet_damage
     *
     * @return float|null
     */
    public function getBulletDamage()
    {
        return $this->container['bullet_damage'];
    }

    /**
     * Sets bullet_damage
     *
     * @param float|null $bullet_damage bullet_damage
     *
     * @return self
     */
    public function setBulletDamage($bullet_damage)
    {
        if (is_null($bullet_damage)) {
            array_push($this->openAPINullablesSetToNull, 'bullet_damage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bullet_damage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bullet_damage'] = $bullet_damage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


