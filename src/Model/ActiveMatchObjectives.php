<?php
/**
 * ActiveMatchObjectives
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DeadlockAPI\Data
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock Data API
 *
 * API for Deadlock game data, containing builds and active matches
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeadlockAPI\Data\Model;

use \ArrayAccess;
use \DeadlockAPI\Data\ObjectSerializer;

/**
 * ActiveMatchObjectives Class Doc Comment
 *
 * @category Class
 * @package  DeadlockAPI\Data
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActiveMatchObjectives implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActiveMatchObjectives';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'core' => 'bool',
        'tier1_lane1' => 'bool',
        'tier1_lane2' => 'bool',
        'tier1_lane3' => 'bool',
        'tier1_lane4' => 'bool',
        'tier2_lane1' => 'bool',
        'tier2_lane2' => 'bool',
        'tier2_lane3' => 'bool',
        'tier2_lane4' => 'bool',
        'titan' => 'bool',
        'titan_shield_generator_1' => 'bool',
        'titan_shield_generator_2' => 'bool',
        'barrack_boss_lane1' => 'bool',
        'barrack_boss_lane2' => 'bool',
        'barrack_boss_lane3' => 'bool',
        'barrack_boss_lane4' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'core' => null,
        'tier1_lane1' => null,
        'tier1_lane2' => null,
        'tier1_lane3' => null,
        'tier1_lane4' => null,
        'tier2_lane1' => null,
        'tier2_lane2' => null,
        'tier2_lane3' => null,
        'tier2_lane4' => null,
        'titan' => null,
        'titan_shield_generator_1' => null,
        'titan_shield_generator_2' => null,
        'barrack_boss_lane1' => null,
        'barrack_boss_lane2' => null,
        'barrack_boss_lane3' => null,
        'barrack_boss_lane4' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'core' => false,
        'tier1_lane1' => false,
        'tier1_lane2' => false,
        'tier1_lane3' => false,
        'tier1_lane4' => false,
        'tier2_lane1' => false,
        'tier2_lane2' => false,
        'tier2_lane3' => false,
        'tier2_lane4' => false,
        'titan' => false,
        'titan_shield_generator_1' => false,
        'titan_shield_generator_2' => false,
        'barrack_boss_lane1' => false,
        'barrack_boss_lane2' => false,
        'barrack_boss_lane3' => false,
        'barrack_boss_lane4' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'core' => 'core',
        'tier1_lane1' => 'tier1_lane1',
        'tier1_lane2' => 'tier1_lane2',
        'tier1_lane3' => 'tier1_lane3',
        'tier1_lane4' => 'tier1_lane4',
        'tier2_lane1' => 'tier2_lane1',
        'tier2_lane2' => 'tier2_lane2',
        'tier2_lane3' => 'tier2_lane3',
        'tier2_lane4' => 'tier2_lane4',
        'titan' => 'titan',
        'titan_shield_generator_1' => 'titan_shield_generator_1',
        'titan_shield_generator_2' => 'titan_shield_generator_2',
        'barrack_boss_lane1' => 'barrack_boss_lane1',
        'barrack_boss_lane2' => 'barrack_boss_lane2',
        'barrack_boss_lane3' => 'barrack_boss_lane3',
        'barrack_boss_lane4' => 'barrack_boss_lane4'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'core' => 'setCore',
        'tier1_lane1' => 'setTier1Lane1',
        'tier1_lane2' => 'setTier1Lane2',
        'tier1_lane3' => 'setTier1Lane3',
        'tier1_lane4' => 'setTier1Lane4',
        'tier2_lane1' => 'setTier2Lane1',
        'tier2_lane2' => 'setTier2Lane2',
        'tier2_lane3' => 'setTier2Lane3',
        'tier2_lane4' => 'setTier2Lane4',
        'titan' => 'setTitan',
        'titan_shield_generator_1' => 'setTitanShieldGenerator1',
        'titan_shield_generator_2' => 'setTitanShieldGenerator2',
        'barrack_boss_lane1' => 'setBarrackBossLane1',
        'barrack_boss_lane2' => 'setBarrackBossLane2',
        'barrack_boss_lane3' => 'setBarrackBossLane3',
        'barrack_boss_lane4' => 'setBarrackBossLane4'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'core' => 'getCore',
        'tier1_lane1' => 'getTier1Lane1',
        'tier1_lane2' => 'getTier1Lane2',
        'tier1_lane3' => 'getTier1Lane3',
        'tier1_lane4' => 'getTier1Lane4',
        'tier2_lane1' => 'getTier2Lane1',
        'tier2_lane2' => 'getTier2Lane2',
        'tier2_lane3' => 'getTier2Lane3',
        'tier2_lane4' => 'getTier2Lane4',
        'titan' => 'getTitan',
        'titan_shield_generator_1' => 'getTitanShieldGenerator1',
        'titan_shield_generator_2' => 'getTitanShieldGenerator2',
        'barrack_boss_lane1' => 'getBarrackBossLane1',
        'barrack_boss_lane2' => 'getBarrackBossLane2',
        'barrack_boss_lane3' => 'getBarrackBossLane3',
        'barrack_boss_lane4' => 'getBarrackBossLane4'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('core', $data ?? [], null);
        $this->setIfExists('tier1_lane1', $data ?? [], null);
        $this->setIfExists('tier1_lane2', $data ?? [], null);
        $this->setIfExists('tier1_lane3', $data ?? [], null);
        $this->setIfExists('tier1_lane4', $data ?? [], null);
        $this->setIfExists('tier2_lane1', $data ?? [], null);
        $this->setIfExists('tier2_lane2', $data ?? [], null);
        $this->setIfExists('tier2_lane3', $data ?? [], null);
        $this->setIfExists('tier2_lane4', $data ?? [], null);
        $this->setIfExists('titan', $data ?? [], null);
        $this->setIfExists('titan_shield_generator_1', $data ?? [], null);
        $this->setIfExists('titan_shield_generator_2', $data ?? [], null);
        $this->setIfExists('barrack_boss_lane1', $data ?? [], null);
        $this->setIfExists('barrack_boss_lane2', $data ?? [], null);
        $this->setIfExists('barrack_boss_lane3', $data ?? [], null);
        $this->setIfExists('barrack_boss_lane4', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['core'] === null) {
            $invalidProperties[] = "'core' can't be null";
        }
        if ($this->container['tier1_lane1'] === null) {
            $invalidProperties[] = "'tier1_lane1' can't be null";
        }
        if ($this->container['tier1_lane2'] === null) {
            $invalidProperties[] = "'tier1_lane2' can't be null";
        }
        if ($this->container['tier1_lane3'] === null) {
            $invalidProperties[] = "'tier1_lane3' can't be null";
        }
        if ($this->container['tier1_lane4'] === null) {
            $invalidProperties[] = "'tier1_lane4' can't be null";
        }
        if ($this->container['tier2_lane1'] === null) {
            $invalidProperties[] = "'tier2_lane1' can't be null";
        }
        if ($this->container['tier2_lane2'] === null) {
            $invalidProperties[] = "'tier2_lane2' can't be null";
        }
        if ($this->container['tier2_lane3'] === null) {
            $invalidProperties[] = "'tier2_lane3' can't be null";
        }
        if ($this->container['tier2_lane4'] === null) {
            $invalidProperties[] = "'tier2_lane4' can't be null";
        }
        if ($this->container['titan'] === null) {
            $invalidProperties[] = "'titan' can't be null";
        }
        if ($this->container['titan_shield_generator_1'] === null) {
            $invalidProperties[] = "'titan_shield_generator_1' can't be null";
        }
        if ($this->container['titan_shield_generator_2'] === null) {
            $invalidProperties[] = "'titan_shield_generator_2' can't be null";
        }
        if ($this->container['barrack_boss_lane1'] === null) {
            $invalidProperties[] = "'barrack_boss_lane1' can't be null";
        }
        if ($this->container['barrack_boss_lane2'] === null) {
            $invalidProperties[] = "'barrack_boss_lane2' can't be null";
        }
        if ($this->container['barrack_boss_lane3'] === null) {
            $invalidProperties[] = "'barrack_boss_lane3' can't be null";
        }
        if ($this->container['barrack_boss_lane4'] === null) {
            $invalidProperties[] = "'barrack_boss_lane4' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets core
     *
     * @return bool
     */
    public function getCore()
    {
        return $this->container['core'];
    }

    /**
     * Sets core
     *
     * @param bool $core core
     *
     * @return self
     */
    public function setCore($core)
    {
        if (is_null($core)) {
            throw new \InvalidArgumentException('non-nullable core cannot be null');
        }
        $this->container['core'] = $core;

        return $this;
    }

    /**
     * Gets tier1_lane1
     *
     * @return bool
     */
    public function getTier1Lane1()
    {
        return $this->container['tier1_lane1'];
    }

    /**
     * Sets tier1_lane1
     *
     * @param bool $tier1_lane1 tier1_lane1
     *
     * @return self
     */
    public function setTier1Lane1($tier1_lane1)
    {
        if (is_null($tier1_lane1)) {
            throw new \InvalidArgumentException('non-nullable tier1_lane1 cannot be null');
        }
        $this->container['tier1_lane1'] = $tier1_lane1;

        return $this;
    }

    /**
     * Gets tier1_lane2
     *
     * @return bool
     */
    public function getTier1Lane2()
    {
        return $this->container['tier1_lane2'];
    }

    /**
     * Sets tier1_lane2
     *
     * @param bool $tier1_lane2 tier1_lane2
     *
     * @return self
     */
    public function setTier1Lane2($tier1_lane2)
    {
        if (is_null($tier1_lane2)) {
            throw new \InvalidArgumentException('non-nullable tier1_lane2 cannot be null');
        }
        $this->container['tier1_lane2'] = $tier1_lane2;

        return $this;
    }

    /**
     * Gets tier1_lane3
     *
     * @return bool
     */
    public function getTier1Lane3()
    {
        return $this->container['tier1_lane3'];
    }

    /**
     * Sets tier1_lane3
     *
     * @param bool $tier1_lane3 tier1_lane3
     *
     * @return self
     */
    public function setTier1Lane3($tier1_lane3)
    {
        if (is_null($tier1_lane3)) {
            throw new \InvalidArgumentException('non-nullable tier1_lane3 cannot be null');
        }
        $this->container['tier1_lane3'] = $tier1_lane3;

        return $this;
    }

    /**
     * Gets tier1_lane4
     *
     * @return bool
     */
    public function getTier1Lane4()
    {
        return $this->container['tier1_lane4'];
    }

    /**
     * Sets tier1_lane4
     *
     * @param bool $tier1_lane4 tier1_lane4
     *
     * @return self
     */
    public function setTier1Lane4($tier1_lane4)
    {
        if (is_null($tier1_lane4)) {
            throw new \InvalidArgumentException('non-nullable tier1_lane4 cannot be null');
        }
        $this->container['tier1_lane4'] = $tier1_lane4;

        return $this;
    }

    /**
     * Gets tier2_lane1
     *
     * @return bool
     */
    public function getTier2Lane1()
    {
        return $this->container['tier2_lane1'];
    }

    /**
     * Sets tier2_lane1
     *
     * @param bool $tier2_lane1 tier2_lane1
     *
     * @return self
     */
    public function setTier2Lane1($tier2_lane1)
    {
        if (is_null($tier2_lane1)) {
            throw new \InvalidArgumentException('non-nullable tier2_lane1 cannot be null');
        }
        $this->container['tier2_lane1'] = $tier2_lane1;

        return $this;
    }

    /**
     * Gets tier2_lane2
     *
     * @return bool
     */
    public function getTier2Lane2()
    {
        return $this->container['tier2_lane2'];
    }

    /**
     * Sets tier2_lane2
     *
     * @param bool $tier2_lane2 tier2_lane2
     *
     * @return self
     */
    public function setTier2Lane2($tier2_lane2)
    {
        if (is_null($tier2_lane2)) {
            throw new \InvalidArgumentException('non-nullable tier2_lane2 cannot be null');
        }
        $this->container['tier2_lane2'] = $tier2_lane2;

        return $this;
    }

    /**
     * Gets tier2_lane3
     *
     * @return bool
     */
    public function getTier2Lane3()
    {
        return $this->container['tier2_lane3'];
    }

    /**
     * Sets tier2_lane3
     *
     * @param bool $tier2_lane3 tier2_lane3
     *
     * @return self
     */
    public function setTier2Lane3($tier2_lane3)
    {
        if (is_null($tier2_lane3)) {
            throw new \InvalidArgumentException('non-nullable tier2_lane3 cannot be null');
        }
        $this->container['tier2_lane3'] = $tier2_lane3;

        return $this;
    }

    /**
     * Gets tier2_lane4
     *
     * @return bool
     */
    public function getTier2Lane4()
    {
        return $this->container['tier2_lane4'];
    }

    /**
     * Sets tier2_lane4
     *
     * @param bool $tier2_lane4 tier2_lane4
     *
     * @return self
     */
    public function setTier2Lane4($tier2_lane4)
    {
        if (is_null($tier2_lane4)) {
            throw new \InvalidArgumentException('non-nullable tier2_lane4 cannot be null');
        }
        $this->container['tier2_lane4'] = $tier2_lane4;

        return $this;
    }

    /**
     * Gets titan
     *
     * @return bool
     */
    public function getTitan()
    {
        return $this->container['titan'];
    }

    /**
     * Sets titan
     *
     * @param bool $titan titan
     *
     * @return self
     */
    public function setTitan($titan)
    {
        if (is_null($titan)) {
            throw new \InvalidArgumentException('non-nullable titan cannot be null');
        }
        $this->container['titan'] = $titan;

        return $this;
    }

    /**
     * Gets titan_shield_generator_1
     *
     * @return bool
     */
    public function getTitanShieldGenerator1()
    {
        return $this->container['titan_shield_generator_1'];
    }

    /**
     * Sets titan_shield_generator_1
     *
     * @param bool $titan_shield_generator_1 titan_shield_generator_1
     *
     * @return self
     */
    public function setTitanShieldGenerator1($titan_shield_generator_1)
    {
        if (is_null($titan_shield_generator_1)) {
            throw new \InvalidArgumentException('non-nullable titan_shield_generator_1 cannot be null');
        }
        $this->container['titan_shield_generator_1'] = $titan_shield_generator_1;

        return $this;
    }

    /**
     * Gets titan_shield_generator_2
     *
     * @return bool
     */
    public function getTitanShieldGenerator2()
    {
        return $this->container['titan_shield_generator_2'];
    }

    /**
     * Sets titan_shield_generator_2
     *
     * @param bool $titan_shield_generator_2 titan_shield_generator_2
     *
     * @return self
     */
    public function setTitanShieldGenerator2($titan_shield_generator_2)
    {
        if (is_null($titan_shield_generator_2)) {
            throw new \InvalidArgumentException('non-nullable titan_shield_generator_2 cannot be null');
        }
        $this->container['titan_shield_generator_2'] = $titan_shield_generator_2;

        return $this;
    }

    /**
     * Gets barrack_boss_lane1
     *
     * @return bool
     */
    public function getBarrackBossLane1()
    {
        return $this->container['barrack_boss_lane1'];
    }

    /**
     * Sets barrack_boss_lane1
     *
     * @param bool $barrack_boss_lane1 barrack_boss_lane1
     *
     * @return self
     */
    public function setBarrackBossLane1($barrack_boss_lane1)
    {
        if (is_null($barrack_boss_lane1)) {
            throw new \InvalidArgumentException('non-nullable barrack_boss_lane1 cannot be null');
        }
        $this->container['barrack_boss_lane1'] = $barrack_boss_lane1;

        return $this;
    }

    /**
     * Gets barrack_boss_lane2
     *
     * @return bool
     */
    public function getBarrackBossLane2()
    {
        return $this->container['barrack_boss_lane2'];
    }

    /**
     * Sets barrack_boss_lane2
     *
     * @param bool $barrack_boss_lane2 barrack_boss_lane2
     *
     * @return self
     */
    public function setBarrackBossLane2($barrack_boss_lane2)
    {
        if (is_null($barrack_boss_lane2)) {
            throw new \InvalidArgumentException('non-nullable barrack_boss_lane2 cannot be null');
        }
        $this->container['barrack_boss_lane2'] = $barrack_boss_lane2;

        return $this;
    }

    /**
     * Gets barrack_boss_lane3
     *
     * @return bool
     */
    public function getBarrackBossLane3()
    {
        return $this->container['barrack_boss_lane3'];
    }

    /**
     * Sets barrack_boss_lane3
     *
     * @param bool $barrack_boss_lane3 barrack_boss_lane3
     *
     * @return self
     */
    public function setBarrackBossLane3($barrack_boss_lane3)
    {
        if (is_null($barrack_boss_lane3)) {
            throw new \InvalidArgumentException('non-nullable barrack_boss_lane3 cannot be null');
        }
        $this->container['barrack_boss_lane3'] = $barrack_boss_lane3;

        return $this;
    }

    /**
     * Gets barrack_boss_lane4
     *
     * @return bool
     */
    public function getBarrackBossLane4()
    {
        return $this->container['barrack_boss_lane4'];
    }

    /**
     * Sets barrack_boss_lane4
     *
     * @param bool $barrack_boss_lane4 barrack_boss_lane4
     *
     * @return self
     */
    public function setBarrackBossLane4($barrack_boss_lane4)
    {
        if (is_null($barrack_boss_lane4)) {
            throw new \InvalidArgumentException('non-nullable barrack_boss_lane4 cannot be null');
        }
        $this->container['barrack_boss_lane4'] = $barrack_boss_lane4;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


