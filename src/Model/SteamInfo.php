<?php
/**
 * SteamInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock Assets API
 *
 * API for Deadlock assets, including hero stats and images, and item stats and images.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeadlockApi\Model;

use \ArrayAccess;
use \DeadlockApi\ObjectSerializer;

/**
 * SteamInfo Class Doc Comment
 *
 * @category Class
 * @package  DeadlockApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SteamInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SteamInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_version' => 'int',
        'server_version' => 'int',
        'product_name' => 'string',
        'app_id' => 'int',
        'server_app_id' => 'int',
        'tools_app_id' => 'int',
        'source_revision' => 'int',
        'version_date' => 'string',
        'version_time' => 'string',
        'version_datetime' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_version' => null,
        'server_version' => null,
        'product_name' => null,
        'app_id' => null,
        'server_app_id' => null,
        'tools_app_id' => null,
        'source_revision' => null,
        'version_date' => null,
        'version_time' => null,
        'version_datetime' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_version' => false,
        'server_version' => false,
        'product_name' => false,
        'app_id' => false,
        'server_app_id' => false,
        'tools_app_id' => false,
        'source_revision' => false,
        'version_date' => false,
        'version_time' => false,
        'version_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_version' => 'client_version',
        'server_version' => 'server_version',
        'product_name' => 'product_name',
        'app_id' => 'app_id',
        'server_app_id' => 'server_app_id',
        'tools_app_id' => 'tools_app_id',
        'source_revision' => 'source_revision',
        'version_date' => 'version_date',
        'version_time' => 'version_time',
        'version_datetime' => 'version_datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_version' => 'setClientVersion',
        'server_version' => 'setServerVersion',
        'product_name' => 'setProductName',
        'app_id' => 'setAppId',
        'server_app_id' => 'setServerAppId',
        'tools_app_id' => 'setToolsAppId',
        'source_revision' => 'setSourceRevision',
        'version_date' => 'setVersionDate',
        'version_time' => 'setVersionTime',
        'version_datetime' => 'setVersionDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_version' => 'getClientVersion',
        'server_version' => 'getServerVersion',
        'product_name' => 'getProductName',
        'app_id' => 'getAppId',
        'server_app_id' => 'getServerAppId',
        'tools_app_id' => 'getToolsAppId',
        'source_revision' => 'getSourceRevision',
        'version_date' => 'getVersionDate',
        'version_time' => 'getVersionTime',
        'version_datetime' => 'getVersionDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('client_version', $data ?? [], null);
        $this->setIfExists('server_version', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('app_id', $data ?? [], null);
        $this->setIfExists('server_app_id', $data ?? [], null);
        $this->setIfExists('tools_app_id', $data ?? [], null);
        $this->setIfExists('source_revision', $data ?? [], null);
        $this->setIfExists('version_date', $data ?? [], null);
        $this->setIfExists('version_time', $data ?? [], null);
        $this->setIfExists('version_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_version'] === null) {
            $invalidProperties[] = "'client_version' can't be null";
        }
        if ($this->container['server_version'] === null) {
            $invalidProperties[] = "'server_version' can't be null";
        }
        if ($this->container['product_name'] === null) {
            $invalidProperties[] = "'product_name' can't be null";
        }
        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['server_app_id'] === null) {
            $invalidProperties[] = "'server_app_id' can't be null";
        }
        if ($this->container['tools_app_id'] === null) {
            $invalidProperties[] = "'tools_app_id' can't be null";
        }
        if ($this->container['source_revision'] === null) {
            $invalidProperties[] = "'source_revision' can't be null";
        }
        if ($this->container['version_date'] === null) {
            $invalidProperties[] = "'version_date' can't be null";
        }
        if ($this->container['version_time'] === null) {
            $invalidProperties[] = "'version_time' can't be null";
        }
        if ($this->container['version_datetime'] === null) {
            $invalidProperties[] = "'version_datetime' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_version
     *
     * @return int
     */
    public function getClientVersion()
    {
        return $this->container['client_version'];
    }

    /**
     * Sets client_version
     *
     * @param int $client_version client_version
     *
     * @return self
     */
    public function setClientVersion($client_version)
    {
        if (is_null($client_version)) {
            throw new \InvalidArgumentException('non-nullable client_version cannot be null');
        }
        $this->container['client_version'] = $client_version;

        return $this;
    }

    /**
     * Gets server_version
     *
     * @return int
     */
    public function getServerVersion()
    {
        return $this->container['server_version'];
    }

    /**
     * Sets server_version
     *
     * @param int $server_version server_version
     *
     * @return self
     */
    public function setServerVersion($server_version)
    {
        if (is_null($server_version)) {
            throw new \InvalidArgumentException('non-nullable server_version cannot be null');
        }
        $this->container['server_version'] = $server_version;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param int $app_id app_id
     *
     * @return self
     */
    public function setAppId($app_id)
    {
        if (is_null($app_id)) {
            throw new \InvalidArgumentException('non-nullable app_id cannot be null');
        }
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets server_app_id
     *
     * @return int
     */
    public function getServerAppId()
    {
        return $this->container['server_app_id'];
    }

    /**
     * Sets server_app_id
     *
     * @param int $server_app_id server_app_id
     *
     * @return self
     */
    public function setServerAppId($server_app_id)
    {
        if (is_null($server_app_id)) {
            throw new \InvalidArgumentException('non-nullable server_app_id cannot be null');
        }
        $this->container['server_app_id'] = $server_app_id;

        return $this;
    }

    /**
     * Gets tools_app_id
     *
     * @return int
     */
    public function getToolsAppId()
    {
        return $this->container['tools_app_id'];
    }

    /**
     * Sets tools_app_id
     *
     * @param int $tools_app_id tools_app_id
     *
     * @return self
     */
    public function setToolsAppId($tools_app_id)
    {
        if (is_null($tools_app_id)) {
            throw new \InvalidArgumentException('non-nullable tools_app_id cannot be null');
        }
        $this->container['tools_app_id'] = $tools_app_id;

        return $this;
    }

    /**
     * Gets source_revision
     *
     * @return int
     */
    public function getSourceRevision()
    {
        return $this->container['source_revision'];
    }

    /**
     * Sets source_revision
     *
     * @param int $source_revision source_revision
     *
     * @return self
     */
    public function setSourceRevision($source_revision)
    {
        if (is_null($source_revision)) {
            throw new \InvalidArgumentException('non-nullable source_revision cannot be null');
        }
        $this->container['source_revision'] = $source_revision;

        return $this;
    }

    /**
     * Gets version_date
     *
     * @return string
     */
    public function getVersionDate()
    {
        return $this->container['version_date'];
    }

    /**
     * Sets version_date
     *
     * @param string $version_date version_date
     *
     * @return self
     */
    public function setVersionDate($version_date)
    {
        if (is_null($version_date)) {
            throw new \InvalidArgumentException('non-nullable version_date cannot be null');
        }
        $this->container['version_date'] = $version_date;

        return $this;
    }

    /**
     * Gets version_time
     *
     * @return string
     */
    public function getVersionTime()
    {
        return $this->container['version_time'];
    }

    /**
     * Sets version_time
     *
     * @param string $version_time version_time
     *
     * @return self
     */
    public function setVersionTime($version_time)
    {
        if (is_null($version_time)) {
            throw new \InvalidArgumentException('non-nullable version_time cannot be null');
        }
        $this->container['version_time'] = $version_time;

        return $this;
    }

    /**
     * Gets version_datetime
     *
     * @return \DateTime
     */
    public function getVersionDatetime()
    {
        return $this->container['version_datetime'];
    }

    /**
     * Sets version_datetime
     *
     * @param \DateTime $version_datetime version_datetime
     *
     * @return self
     */
    public function setVersionDatetime($version_datetime)
    {
        if (is_null($version_datetime)) {
            throw new \InvalidArgumentException('non-nullable version_datetime cannot be null');
        }
        $this->container['version_datetime'] = $version_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


