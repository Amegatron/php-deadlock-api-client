<?php
/**
 * ActiveMatch
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DeadlockAPI\Data
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deadlock Data API
 *
 * API for Deadlock game data, containing builds and active matches
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeadlockAPI\Data\Model;

use \ArrayAccess;
use \DeadlockAPI\Data\ObjectSerializer;

/**
 * ActiveMatch Class Doc Comment
 *
 * @category Class
 * @package  DeadlockAPI\Data
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActiveMatch implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActiveMatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_time' => 'int',
        'winning_team' => 'int',
        'match_id' => 'int',
        'players' => '\DeadlockAPI\Data\Model\ActiveMatchPlayer[]',
        'lobby_id' => 'int',
        'net_worth_team_0' => 'int',
        'net_worth_team_1' => 'int',
        'duration_s' => 'int',
        'spectators' => 'int',
        'open_spectator_slots' => 'int',
        'objectives_mask_team0' => 'int',
        'objectives_mask_team1' => 'int',
        'match_mode' => 'int',
        'game_mode' => 'int',
        'match_score' => 'int',
        'region_mode' => 'int',
        'objectives_team0' => '\DeadlockAPI\Data\Model\ActiveMatchObjectives',
        'objectives_team1' => '\DeadlockAPI\Data\Model\ActiveMatchObjectives'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_time' => null,
        'winning_team' => null,
        'match_id' => null,
        'players' => null,
        'lobby_id' => null,
        'net_worth_team_0' => null,
        'net_worth_team_1' => null,
        'duration_s' => null,
        'spectators' => null,
        'open_spectator_slots' => null,
        'objectives_mask_team0' => null,
        'objectives_mask_team1' => null,
        'match_mode' => null,
        'game_mode' => null,
        'match_score' => null,
        'region_mode' => null,
        'objectives_team0' => null,
        'objectives_team1' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_time' => false,
        'winning_team' => false,
        'match_id' => false,
        'players' => false,
        'lobby_id' => false,
        'net_worth_team_0' => false,
        'net_worth_team_1' => false,
        'duration_s' => false,
        'spectators' => false,
        'open_spectator_slots' => false,
        'objectives_mask_team0' => false,
        'objectives_mask_team1' => false,
        'match_mode' => false,
        'game_mode' => false,
        'match_score' => false,
        'region_mode' => false,
        'objectives_team0' => true,
        'objectives_team1' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_time' => 'start_time',
        'winning_team' => 'winning_team',
        'match_id' => 'match_id',
        'players' => 'players',
        'lobby_id' => 'lobby_id',
        'net_worth_team_0' => 'net_worth_team_0',
        'net_worth_team_1' => 'net_worth_team_1',
        'duration_s' => 'duration_s',
        'spectators' => 'spectators',
        'open_spectator_slots' => 'open_spectator_slots',
        'objectives_mask_team0' => 'objectives_mask_team0',
        'objectives_mask_team1' => 'objectives_mask_team1',
        'match_mode' => 'match_mode',
        'game_mode' => 'game_mode',
        'match_score' => 'match_score',
        'region_mode' => 'region_mode',
        'objectives_team0' => 'objectives_team0',
        'objectives_team1' => 'objectives_team1'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_time' => 'setStartTime',
        'winning_team' => 'setWinningTeam',
        'match_id' => 'setMatchId',
        'players' => 'setPlayers',
        'lobby_id' => 'setLobbyId',
        'net_worth_team_0' => 'setNetWorthTeam0',
        'net_worth_team_1' => 'setNetWorthTeam1',
        'duration_s' => 'setDurationS',
        'spectators' => 'setSpectators',
        'open_spectator_slots' => 'setOpenSpectatorSlots',
        'objectives_mask_team0' => 'setObjectivesMaskTeam0',
        'objectives_mask_team1' => 'setObjectivesMaskTeam1',
        'match_mode' => 'setMatchMode',
        'game_mode' => 'setGameMode',
        'match_score' => 'setMatchScore',
        'region_mode' => 'setRegionMode',
        'objectives_team0' => 'setObjectivesTeam0',
        'objectives_team1' => 'setObjectivesTeam1'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_time' => 'getStartTime',
        'winning_team' => 'getWinningTeam',
        'match_id' => 'getMatchId',
        'players' => 'getPlayers',
        'lobby_id' => 'getLobbyId',
        'net_worth_team_0' => 'getNetWorthTeam0',
        'net_worth_team_1' => 'getNetWorthTeam1',
        'duration_s' => 'getDurationS',
        'spectators' => 'getSpectators',
        'open_spectator_slots' => 'getOpenSpectatorSlots',
        'objectives_mask_team0' => 'getObjectivesMaskTeam0',
        'objectives_mask_team1' => 'getObjectivesMaskTeam1',
        'match_mode' => 'getMatchMode',
        'game_mode' => 'getGameMode',
        'match_score' => 'getMatchScore',
        'region_mode' => 'getRegionMode',
        'objectives_team0' => 'getObjectivesTeam0',
        'objectives_team1' => 'getObjectivesTeam1'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('winning_team', $data ?? [], null);
        $this->setIfExists('match_id', $data ?? [], null);
        $this->setIfExists('players', $data ?? [], null);
        $this->setIfExists('lobby_id', $data ?? [], null);
        $this->setIfExists('net_worth_team_0', $data ?? [], null);
        $this->setIfExists('net_worth_team_1', $data ?? [], null);
        $this->setIfExists('duration_s', $data ?? [], null);
        $this->setIfExists('spectators', $data ?? [], null);
        $this->setIfExists('open_spectator_slots', $data ?? [], null);
        $this->setIfExists('objectives_mask_team0', $data ?? [], null);
        $this->setIfExists('objectives_mask_team1', $data ?? [], null);
        $this->setIfExists('match_mode', $data ?? [], null);
        $this->setIfExists('game_mode', $data ?? [], null);
        $this->setIfExists('match_score', $data ?? [], null);
        $this->setIfExists('region_mode', $data ?? [], null);
        $this->setIfExists('objectives_team0', $data ?? [], null);
        $this->setIfExists('objectives_team1', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['winning_team'] === null) {
            $invalidProperties[] = "'winning_team' can't be null";
        }
        if ($this->container['match_id'] === null) {
            $invalidProperties[] = "'match_id' can't be null";
        }
        if ($this->container['players'] === null) {
            $invalidProperties[] = "'players' can't be null";
        }
        if ($this->container['lobby_id'] === null) {
            $invalidProperties[] = "'lobby_id' can't be null";
        }
        if ($this->container['net_worth_team_0'] === null) {
            $invalidProperties[] = "'net_worth_team_0' can't be null";
        }
        if ($this->container['net_worth_team_1'] === null) {
            $invalidProperties[] = "'net_worth_team_1' can't be null";
        }
        if ($this->container['duration_s'] === null) {
            $invalidProperties[] = "'duration_s' can't be null";
        }
        if ($this->container['spectators'] === null) {
            $invalidProperties[] = "'spectators' can't be null";
        }
        if ($this->container['open_spectator_slots'] === null) {
            $invalidProperties[] = "'open_spectator_slots' can't be null";
        }
        if ($this->container['objectives_mask_team0'] === null) {
            $invalidProperties[] = "'objectives_mask_team0' can't be null";
        }
        if ($this->container['objectives_mask_team1'] === null) {
            $invalidProperties[] = "'objectives_mask_team1' can't be null";
        }
        if ($this->container['match_mode'] === null) {
            $invalidProperties[] = "'match_mode' can't be null";
        }
        if ($this->container['game_mode'] === null) {
            $invalidProperties[] = "'game_mode' can't be null";
        }
        if ($this->container['match_score'] === null) {
            $invalidProperties[] = "'match_score' can't be null";
        }
        if ($this->container['region_mode'] === null) {
            $invalidProperties[] = "'region_mode' can't be null";
        }
        if ($this->container['objectives_team0'] === null) {
            $invalidProperties[] = "'objectives_team0' can't be null";
        }
        if ($this->container['objectives_team1'] === null) {
            $invalidProperties[] = "'objectives_team1' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_time
     *
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param int $start_time start_time
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets winning_team
     *
     * @return int
     */
    public function getWinningTeam()
    {
        return $this->container['winning_team'];
    }

    /**
     * Sets winning_team
     *
     * @param int $winning_team winning_team
     *
     * @return self
     */
    public function setWinningTeam($winning_team)
    {
        if (is_null($winning_team)) {
            throw new \InvalidArgumentException('non-nullable winning_team cannot be null');
        }
        $this->container['winning_team'] = $winning_team;

        return $this;
    }

    /**
     * Gets match_id
     *
     * @return int
     */
    public function getMatchId()
    {
        return $this->container['match_id'];
    }

    /**
     * Sets match_id
     *
     * @param int $match_id match_id
     *
     * @return self
     */
    public function setMatchId($match_id)
    {
        if (is_null($match_id)) {
            throw new \InvalidArgumentException('non-nullable match_id cannot be null');
        }
        $this->container['match_id'] = $match_id;

        return $this;
    }

    /**
     * Gets players
     *
     * @return \DeadlockAPI\Data\Model\ActiveMatchPlayer[]
     */
    public function getPlayers()
    {
        return $this->container['players'];
    }

    /**
     * Sets players
     *
     * @param \DeadlockAPI\Data\Model\ActiveMatchPlayer[] $players players
     *
     * @return self
     */
    public function setPlayers($players)
    {
        if (is_null($players)) {
            throw new \InvalidArgumentException('non-nullable players cannot be null');
        }
        $this->container['players'] = $players;

        return $this;
    }

    /**
     * Gets lobby_id
     *
     * @return int
     */
    public function getLobbyId()
    {
        return $this->container['lobby_id'];
    }

    /**
     * Sets lobby_id
     *
     * @param int $lobby_id lobby_id
     *
     * @return self
     */
    public function setLobbyId($lobby_id)
    {
        if (is_null($lobby_id)) {
            throw new \InvalidArgumentException('non-nullable lobby_id cannot be null');
        }
        $this->container['lobby_id'] = $lobby_id;

        return $this;
    }

    /**
     * Gets net_worth_team_0
     *
     * @return int
     */
    public function getNetWorthTeam0()
    {
        return $this->container['net_worth_team_0'];
    }

    /**
     * Sets net_worth_team_0
     *
     * @param int $net_worth_team_0 net_worth_team_0
     *
     * @return self
     */
    public function setNetWorthTeam0($net_worth_team_0)
    {
        if (is_null($net_worth_team_0)) {
            throw new \InvalidArgumentException('non-nullable net_worth_team_0 cannot be null');
        }
        $this->container['net_worth_team_0'] = $net_worth_team_0;

        return $this;
    }

    /**
     * Gets net_worth_team_1
     *
     * @return int
     */
    public function getNetWorthTeam1()
    {
        return $this->container['net_worth_team_1'];
    }

    /**
     * Sets net_worth_team_1
     *
     * @param int $net_worth_team_1 net_worth_team_1
     *
     * @return self
     */
    public function setNetWorthTeam1($net_worth_team_1)
    {
        if (is_null($net_worth_team_1)) {
            throw new \InvalidArgumentException('non-nullable net_worth_team_1 cannot be null');
        }
        $this->container['net_worth_team_1'] = $net_worth_team_1;

        return $this;
    }

    /**
     * Gets duration_s
     *
     * @return int
     */
    public function getDurationS()
    {
        return $this->container['duration_s'];
    }

    /**
     * Sets duration_s
     *
     * @param int $duration_s duration_s
     *
     * @return self
     */
    public function setDurationS($duration_s)
    {
        if (is_null($duration_s)) {
            throw new \InvalidArgumentException('non-nullable duration_s cannot be null');
        }
        $this->container['duration_s'] = $duration_s;

        return $this;
    }

    /**
     * Gets spectators
     *
     * @return int
     */
    public function getSpectators()
    {
        return $this->container['spectators'];
    }

    /**
     * Sets spectators
     *
     * @param int $spectators spectators
     *
     * @return self
     */
    public function setSpectators($spectators)
    {
        if (is_null($spectators)) {
            throw new \InvalidArgumentException('non-nullable spectators cannot be null');
        }
        $this->container['spectators'] = $spectators;

        return $this;
    }

    /**
     * Gets open_spectator_slots
     *
     * @return int
     */
    public function getOpenSpectatorSlots()
    {
        return $this->container['open_spectator_slots'];
    }

    /**
     * Sets open_spectator_slots
     *
     * @param int $open_spectator_slots open_spectator_slots
     *
     * @return self
     */
    public function setOpenSpectatorSlots($open_spectator_slots)
    {
        if (is_null($open_spectator_slots)) {
            throw new \InvalidArgumentException('non-nullable open_spectator_slots cannot be null');
        }
        $this->container['open_spectator_slots'] = $open_spectator_slots;

        return $this;
    }

    /**
     * Gets objectives_mask_team0
     *
     * @return int
     */
    public function getObjectivesMaskTeam0()
    {
        return $this->container['objectives_mask_team0'];
    }

    /**
     * Sets objectives_mask_team0
     *
     * @param int $objectives_mask_team0 objectives_mask_team0
     *
     * @return self
     */
    public function setObjectivesMaskTeam0($objectives_mask_team0)
    {
        if (is_null($objectives_mask_team0)) {
            throw new \InvalidArgumentException('non-nullable objectives_mask_team0 cannot be null');
        }
        $this->container['objectives_mask_team0'] = $objectives_mask_team0;

        return $this;
    }

    /**
     * Gets objectives_mask_team1
     *
     * @return int
     */
    public function getObjectivesMaskTeam1()
    {
        return $this->container['objectives_mask_team1'];
    }

    /**
     * Sets objectives_mask_team1
     *
     * @param int $objectives_mask_team1 objectives_mask_team1
     *
     * @return self
     */
    public function setObjectivesMaskTeam1($objectives_mask_team1)
    {
        if (is_null($objectives_mask_team1)) {
            throw new \InvalidArgumentException('non-nullable objectives_mask_team1 cannot be null');
        }
        $this->container['objectives_mask_team1'] = $objectives_mask_team1;

        return $this;
    }

    /**
     * Gets match_mode
     *
     * @return int
     */
    public function getMatchMode()
    {
        return $this->container['match_mode'];
    }

    /**
     * Sets match_mode
     *
     * @param int $match_mode match_mode
     *
     * @return self
     */
    public function setMatchMode($match_mode)
    {
        if (is_null($match_mode)) {
            throw new \InvalidArgumentException('non-nullable match_mode cannot be null');
        }
        $this->container['match_mode'] = $match_mode;

        return $this;
    }

    /**
     * Gets game_mode
     *
     * @return int
     */
    public function getGameMode()
    {
        return $this->container['game_mode'];
    }

    /**
     * Sets game_mode
     *
     * @param int $game_mode game_mode
     *
     * @return self
     */
    public function setGameMode($game_mode)
    {
        if (is_null($game_mode)) {
            throw new \InvalidArgumentException('non-nullable game_mode cannot be null');
        }
        $this->container['game_mode'] = $game_mode;

        return $this;
    }

    /**
     * Gets match_score
     *
     * @return int
     */
    public function getMatchScore()
    {
        return $this->container['match_score'];
    }

    /**
     * Sets match_score
     *
     * @param int $match_score match_score
     *
     * @return self
     */
    public function setMatchScore($match_score)
    {
        if (is_null($match_score)) {
            throw new \InvalidArgumentException('non-nullable match_score cannot be null');
        }
        $this->container['match_score'] = $match_score;

        return $this;
    }

    /**
     * Gets region_mode
     *
     * @return int
     */
    public function getRegionMode()
    {
        return $this->container['region_mode'];
    }

    /**
     * Sets region_mode
     *
     * @param int $region_mode region_mode
     *
     * @return self
     */
    public function setRegionMode($region_mode)
    {
        if (is_null($region_mode)) {
            throw new \InvalidArgumentException('non-nullable region_mode cannot be null');
        }
        $this->container['region_mode'] = $region_mode;

        return $this;
    }

    /**
     * Gets objectives_team0
     *
     * @return \DeadlockAPI\Data\Model\ActiveMatchObjectives
     */
    public function getObjectivesTeam0()
    {
        return $this->container['objectives_team0'];
    }

    /**
     * Sets objectives_team0
     *
     * @param \DeadlockAPI\Data\Model\ActiveMatchObjectives $objectives_team0 objectives_team0
     *
     * @return self
     */
    public function setObjectivesTeam0($objectives_team0)
    {
        if (is_null($objectives_team0)) {
            array_push($this->openAPINullablesSetToNull, 'objectives_team0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('objectives_team0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['objectives_team0'] = $objectives_team0;

        return $this;
    }

    /**
     * Gets objectives_team1
     *
     * @return \DeadlockAPI\Data\Model\ActiveMatchObjectives
     */
    public function getObjectivesTeam1()
    {
        return $this->container['objectives_team1'];
    }

    /**
     * Sets objectives_team1
     *
     * @param \DeadlockAPI\Data\Model\ActiveMatchObjectives $objectives_team1 objectives_team1
     *
     * @return self
     */
    public function setObjectivesTeam1($objectives_team1)
    {
        if (is_null($objectives_team1)) {
            array_push($this->openAPINullablesSetToNull, 'objectives_team1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('objectives_team1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['objectives_team1'] = $objectives_team1;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


